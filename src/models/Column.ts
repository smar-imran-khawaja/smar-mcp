/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AutoNumberFormat } from './AutoNumberFormat';
import {
    AutoNumberFormatFromJSON,
    AutoNumberFormatFromJSONTyped,
    AutoNumberFormatToJSON,
    AutoNumberFormatToJSONTyped,
} from './AutoNumberFormat';
import type { ContactOption } from './ContactOption';
import {
    ContactOptionFromJSON,
    ContactOptionFromJSONTyped,
    ContactOptionToJSON,
    ContactOptionToJSONTyped,
} from './ContactOption';

/**
 * 
 * @export
 * @interface Column
 */
export interface Column {
    /**
     * 
     * @type {AutoNumberFormat}
     * @memberof Column
     */
    autoNumberFormat?: AutoNumberFormat;
    /**
     * Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**.
     * @type {Array<ContactOption>}
     * @memberof Column
     */
    contactOptions?: Array<ContactOption>;
    /**
     * Column description.
     * @type {string}
     * @memberof Column
     */
    description?: string;
    /**
     * The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it.
     * @type {string}
     * @memberof Column
     */
    format?: string;
    /**
     * The formula for the column, if set.
     * @type {string}
     * @memberof Column
     */
    formula?: string;
    /**
     * Indicates whether the column is hidden.
     * @type {boolean}
     * @memberof Column
     */
    hidden?: boolean;
    /**
     * Column Id.
     * @type {number}
     * @memberof Column
     */
    id?: number;
    /**
     * Column index or position. This number is zero-based.
     * @type {number}
     * @memberof Column
     */
    index?: number;
    /**
     * Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin.
     * @type {boolean}
     * @memberof Column
     */
    locked?: boolean;
    /**
     * Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request.
     * @type {boolean}
     * @memberof Column
     */
    lockedForUser?: boolean;
    /**
     * Array of the options available for the column.
     * @type {Array<string>}
     * @memberof Column
     */
    options?: Array<string>;
    /**
     * Returned only if the column is the Primary Column (value = **true**).
     * @type {boolean}
     * @memberof Column
     */
    primary?: boolean;
    /**
     * When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns).
     * @type {string}
     * @memberof Column
     */
    symbol?: string;
    /**
     * See [System Columns](/api/smartsheet/openapi/columns).
     * @type {string}
     * @memberof Column
     */
    systemColumnType?: ColumnSystemColumnTypeEnum;
    /**
     * Set of tags to indicate special columns. Each element in the array is set to one of the listed enum values.
     * @type {Array<string>}
     * @memberof Column
     */
    tags?: Array<ColumnTagsEnum>;
    /**
     * Column title.
     * @type {string}
     * @memberof Column
     */
    title?: string;
    /**
     * See [Column Types](/api/smartsheet/openapi/columns)
     * @type {string}
     * @memberof Column
     */
    type?: ColumnTypeEnum;
    /**
     * Indicates whether validation has been enabled for the column (value = **true**).
     * @type {boolean}
     * @memberof Column
     */
    validation?: boolean;
    /**
     * * `0`: CONTACT_LIST, PICKLIST, or TEXT_NUMBER.
     * * `1`: MULTI_CONTACT_LIST.
     * * `2`: MULTI_PICKLIST.
     * 
     * @type {number}
     * @memberof Column
     */
    version?: ColumnVersionEnum;
    /**
     * Display width of the column in pixels.
     * @type {number}
     * @memberof Column
     */
    width?: number;
}


/**
 * @export
 */
export const ColumnSystemColumnTypeEnum = {
    AutoNumber: 'AUTO_NUMBER',
    CreatedBy: 'CREATED_BY',
    CreatedDate: 'CREATED_DATE',
    ModifiedBy: 'MODIFIED_BY',
    ModifiedDate: 'MODIFIED_DATE'
} as const;
export type ColumnSystemColumnTypeEnum = typeof ColumnSystemColumnTypeEnum[keyof typeof ColumnSystemColumnTypeEnum];

/**
 * @export
 */
export const ColumnTagsEnum = {
    CalendarEndDate: 'CALENDAR_END_DATE',
    CalendarStartDate: 'CALENDAR_START_DATE',
    CardDone: 'CARD_DONE',
    GanttAllocation: 'GANTT_ALLOCATION',
    GanttAssignedResource: 'GANTT_ASSIGNED_RESOURCE',
    GanttDisplayLabel: 'GANTT_DISPLAY_LABEL',
    GanttDuration: 'GANTT_DURATION',
    GanttEndDate: 'GANTT_END_DATE',
    GanttPercentComplete: 'GANTT_PERCENT_COMPLETE',
    GanttPredecessor: 'GANTT_PREDECESSOR',
    GanttStartDate: 'GANTT_START_DATE',
    BaselineStartDate: 'BASELINE_START_DATE',
    BaselineEndDate: 'BASELINE_END_DATE',
    BaselineVariance: 'BASELINE_VARIANCE'
} as const;
export type ColumnTagsEnum = typeof ColumnTagsEnum[keyof typeof ColumnTagsEnum];

/**
 * @export
 */
export const ColumnTypeEnum = {
    AbstractDatetime: 'ABSTRACT_DATETIME',
    Checkbox: 'CHECKBOX',
    ContactList: 'CONTACT_LIST',
    Date: 'DATE',
    Datetime: 'DATETIME',
    Duration: 'DURATION',
    MultiContactList: 'MULTI_CONTACT_LIST',
    MultiPicklist: 'MULTI_PICKLIST',
    Picklist: 'PICKLIST',
    Predecessor: 'PREDECESSOR',
    TextNumber: 'TEXT_NUMBER'
} as const;
export type ColumnTypeEnum = typeof ColumnTypeEnum[keyof typeof ColumnTypeEnum];

/**
 * @export
 */
export const ColumnVersionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type ColumnVersionEnum = typeof ColumnVersionEnum[keyof typeof ColumnVersionEnum];


/**
 * Check if a given object implements the Column interface.
 */
export function instanceOfColumn(value: object): value is Column {
    return true;
}

export function ColumnFromJSON(json: any): Column {
    return ColumnFromJSONTyped(json, false);
}

export function ColumnFromJSONTyped(json: any, ignoreDiscriminator: boolean): Column {
    if (json == null) {
        return json;
    }
    return {
        
        'autoNumberFormat': json['autoNumberFormat'] == null ? undefined : AutoNumberFormatFromJSON(json['autoNumberFormat']),
        'contactOptions': json['contactOptions'] == null ? undefined : ((json['contactOptions'] as Array<any>).map(ContactOptionFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'format': json['format'] == null ? undefined : json['format'],
        'formula': json['formula'] == null ? undefined : json['formula'],
        'hidden': json['hidden'] == null ? undefined : json['hidden'],
        'id': json['id'] == null ? undefined : json['id'],
        'index': json['index'] == null ? undefined : json['index'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'lockedForUser': json['lockedForUser'] == null ? undefined : json['lockedForUser'],
        'options': json['options'] == null ? undefined : json['options'],
        'primary': json['primary'] == null ? undefined : json['primary'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'systemColumnType': json['systemColumnType'] == null ? undefined : json['systemColumnType'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
        'validation': json['validation'] == null ? undefined : json['validation'],
        'version': json['version'] == null ? undefined : json['version'],
        'width': json['width'] == null ? undefined : json['width'],
    };
}

export function ColumnToJSON(json: any): Column {
    return ColumnToJSONTyped(json, false);
}

export function ColumnToJSONTyped(value?: Column | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'autoNumberFormat': AutoNumberFormatToJSON(value['autoNumberFormat']),
        'contactOptions': value['contactOptions'] == null ? undefined : ((value['contactOptions'] as Array<any>).map(ContactOptionToJSON)),
        'description': value['description'],
        'format': value['format'],
        'formula': value['formula'],
        'hidden': value['hidden'],
        'id': value['id'],
        'index': value['index'],
        'locked': value['locked'],
        'lockedForUser': value['lockedForUser'],
        'options': value['options'],
        'primary': value['primary'],
        'symbol': value['symbol'],
        'systemColumnType': value['systemColumnType'],
        'tags': value['tags'],
        'title': value['title'],
        'type': value['type'],
        'validation': value['validation'],
        'version': value['version'],
        'width': value['width'],
    };
}

