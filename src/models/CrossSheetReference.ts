/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface CrossSheetReference
 */
export interface CrossSheetReference {
    /**
     * Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters.
     * @type {number}
     * @memberof CrossSheetReference
     */
    endColumnId?: number;
    /**
     * Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters.
     * @type {number}
     * @memberof CrossSheetReference
     */
    endRowId?: number;
    /**
     * Cross-sheet reference Id, guaranteed unique within referencing sheet.
     * @type {number}
     * @memberof CrossSheetReference
     */
    id?: number;
    /**
     * Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References.
     * @type {string}
     * @memberof CrossSheetReference
     */
    name?: string;
    /**
     * Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters.
     * @type {number}
     * @memberof CrossSheetReference
     */
    startColumnId?: number;
    /**
     * Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters.
     * @type {number}
     * @memberof CrossSheetReference
     */
    startRowId?: number;
    /**
     * Status of request:
     *  * 'BLOCKED' - A reference is downstream of a circular issue.
     *  * 'BROKEN' - The data source location (column, row or sheet) was deleted.
     *  * 'CIRCULAR' - The formula reference is self referencing and cannot be resolved.
     *  * 'DISABLED' - Updating the reference is temporarily disabled due to maintenance.
     *  * 'INVALID/UNKNOWN' - The reference is new and had not been validated.
     *  * 'NOT_SHARED' - No common shared users.
     *  * 'OK' - The reference is in a good state.
     * 
     * @type {string}
     * @memberof CrossSheetReference
     */
    status?: CrossSheetReferenceStatusEnum;
    /**
     * Sheet Id of source sheet.
     * @type {number}
     * @memberof CrossSheetReference
     */
    sourceSheetId?: number;
}


/**
 * @export
 */
export const CrossSheetReferenceStatusEnum = {
    Blocked: 'BLOCKED',
    Broken: 'BROKEN',
    Circular: 'CIRCULAR',
    Disabled: 'DISABLED',
    InvalidUnknown: 'INVALID/UNKNOWN',
    NotShared: 'NOT-SHARED',
    Ok: 'OK'
} as const;
export type CrossSheetReferenceStatusEnum = typeof CrossSheetReferenceStatusEnum[keyof typeof CrossSheetReferenceStatusEnum];


/**
 * Check if a given object implements the CrossSheetReference interface.
 */
export function instanceOfCrossSheetReference(value: object): value is CrossSheetReference {
    return true;
}

export function CrossSheetReferenceFromJSON(json: any): CrossSheetReference {
    return CrossSheetReferenceFromJSONTyped(json, false);
}

export function CrossSheetReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CrossSheetReference {
    if (json == null) {
        return json;
    }
    return {
        
        'endColumnId': json['endColumnId'] == null ? undefined : json['endColumnId'],
        'endRowId': json['endRowId'] == null ? undefined : json['endRowId'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'startColumnId': json['startColumnId'] == null ? undefined : json['startColumnId'],
        'startRowId': json['startRowId'] == null ? undefined : json['startRowId'],
        'status': json['status'] == null ? undefined : json['status'],
        'sourceSheetId': json['sourceSheetId'] == null ? undefined : json['sourceSheetId'],
    };
}

export function CrossSheetReferenceToJSON(json: any): CrossSheetReference {
    return CrossSheetReferenceToJSONTyped(json, false);
}

export function CrossSheetReferenceToJSONTyped(value?: CrossSheetReference | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'endColumnId': value['endColumnId'],
        'endRowId': value['endRowId'],
        'id': value['id'],
        'name': value['name'],
        'startColumnId': value['startColumnId'],
        'startRowId': value['startRowId'],
        'status': value['status'],
        'sourceSheetId': value['sourceSheetId'],
    };
}

