/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CellLinkWidgetContent } from './CellLinkWidgetContent';
import {
    instanceOfCellLinkWidgetContent,
    CellLinkWidgetContentFromJSON,
    CellLinkWidgetContentFromJSONTyped,
    CellLinkWidgetContentToJSON,
} from './CellLinkWidgetContent';
import type { ChartWidgetContent } from './ChartWidgetContent';
import {
    instanceOfChartWidgetContent,
    ChartWidgetContentFromJSON,
    ChartWidgetContentFromJSONTyped,
    ChartWidgetContentToJSON,
} from './ChartWidgetContent';
import type { ImageWidgetContent } from './ImageWidgetContent';
import {
    instanceOfImageWidgetContent,
    ImageWidgetContentFromJSON,
    ImageWidgetContentFromJSONTyped,
    ImageWidgetContentToJSON,
} from './ImageWidgetContent';
import type { ReportWidgetContent } from './ReportWidgetContent';
import {
    instanceOfReportWidgetContent,
    ReportWidgetContentFromJSON,
    ReportWidgetContentFromJSONTyped,
    ReportWidgetContentToJSON,
} from './ReportWidgetContent';
import type { RichTextWidgetContent } from './RichTextWidgetContent';
import {
    instanceOfRichTextWidgetContent,
    RichTextWidgetContentFromJSON,
    RichTextWidgetContentFromJSONTyped,
    RichTextWidgetContentToJSON,
} from './RichTextWidgetContent';
import type { ShortcutWidgetContent } from './ShortcutWidgetContent';
import {
    instanceOfShortcutWidgetContent,
    ShortcutWidgetContentFromJSON,
    ShortcutWidgetContentFromJSONTyped,
    ShortcutWidgetContentToJSON,
} from './ShortcutWidgetContent';
import type { TitleWidgetContent } from './TitleWidgetContent';
import {
    instanceOfTitleWidgetContent,
    TitleWidgetContentFromJSON,
    TitleWidgetContentFromJSONTyped,
    TitleWidgetContentToJSON,
} from './TitleWidgetContent';
import type { WebContentWidgetContent } from './WebContentWidgetContent';
import {
    instanceOfWebContentWidgetContent,
    WebContentWidgetContentFromJSON,
    WebContentWidgetContentFromJSONTyped,
    WebContentWidgetContentToJSON,
} from './WebContentWidgetContent';

/**
 * @type WidgetContents
 * The type of widget content depends on the value of widget.type.
 * @export
 */
export type WidgetContents = CellLinkWidgetContent | ChartWidgetContent | ImageWidgetContent | ReportWidgetContent | RichTextWidgetContent | ShortcutWidgetContent | TitleWidgetContent | WebContentWidgetContent;

export function WidgetContentsFromJSON(json: any): WidgetContents {
    return WidgetContentsFromJSONTyped(json, false);
}

export function WidgetContentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetContents {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfCellLinkWidgetContent(json)) {
        return CellLinkWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfChartWidgetContent(json)) {
        return ChartWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfImageWidgetContent(json)) {
        return ImageWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfReportWidgetContent(json)) {
        return ReportWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfRichTextWidgetContent(json)) {
        return RichTextWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfShortcutWidgetContent(json)) {
        return ShortcutWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfTitleWidgetContent(json)) {
        return TitleWidgetContentFromJSONTyped(json, true);
    }
    if (instanceOfWebContentWidgetContent(json)) {
        return WebContentWidgetContentFromJSONTyped(json, true);
    }

    return {} as any;
}

export function WidgetContentsToJSON(json: any): any {
    return WidgetContentsToJSONTyped(json, false);
}

export function WidgetContentsToJSONTyped(value?: WidgetContents | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfCellLinkWidgetContent(value)) {
        return CellLinkWidgetContentToJSON(value as CellLinkWidgetContent);
    }
    if (instanceOfChartWidgetContent(value)) {
        return ChartWidgetContentToJSON(value as ChartWidgetContent);
    }
    if (instanceOfImageWidgetContent(value)) {
        return ImageWidgetContentToJSON(value as ImageWidgetContent);
    }
    if (instanceOfReportWidgetContent(value)) {
        return ReportWidgetContentToJSON(value as ReportWidgetContent);
    }
    if (instanceOfRichTextWidgetContent(value)) {
        return RichTextWidgetContentToJSON(value as RichTextWidgetContent);
    }
    if (instanceOfShortcutWidgetContent(value)) {
        return ShortcutWidgetContentToJSON(value as ShortcutWidgetContent);
    }
    if (instanceOfTitleWidgetContent(value)) {
        return TitleWidgetContentToJSON(value as TitleWidgetContent);
    }
    if (instanceOfWebContentWidgetContent(value)) {
        return WebContentWidgetContentToJSON(value as WebContentWidgetContent);
    }

    return {};
}

