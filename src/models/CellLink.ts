/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface CellLink
 */
export interface CellLink {
    /**
     * Column Id of the linked cell.
     * @type {number}
     * @memberof CellLink
     */
    columnId?: number;
    /**
     * Row Id of the linked cell.
     * @type {number}
     * @memberof CellLink
     */
    rowId?: number;
    /**
     * Sheet Id of the sheet that the linked cell belongs to.
     * @type {number}
     * @memberof CellLink
     */
    sheetId?: number;
    /**
     * Sheet name of the linked cell.
     * @type {string}
     * @memberof CellLink
     */
    sheetName?: string;
    /**
     * * `BLOCKED` One of several other values indicating unusual error conditions.
     * * `BROKEN` The row or sheet linked to was deleted.
     * * `CIRCULAR` One of several other values indicating unusual error conditions.
     * * `DISABLED` One of several other values indicating unusual error conditions.
     * * `INACCESSIBLE` The sheet linked to cannot be viewed by this user.
     * * `INVALID` One of several other values indicating unusual error conditions.
     * * `NOT_SHARED` One of several other values indicating unusual error conditions.
     * * `OK` The link is in a good state.
     * 
     * @type {string}
     * @memberof CellLink
     */
    status?: CellLinkStatusEnum;
}


/**
 * @export
 */
export const CellLinkStatusEnum = {
    Blocked: 'BLOCKED',
    Broken: 'BROKEN',
    Circular: 'CIRCULAR',
    Disabled: 'DISABLED',
    Inaccessible: 'INACCESSIBLE',
    Invalid: 'INVALID',
    NotShared: 'NOT_SHARED',
    Ok: 'OK'
} as const;
export type CellLinkStatusEnum = typeof CellLinkStatusEnum[keyof typeof CellLinkStatusEnum];


/**
 * Check if a given object implements the CellLink interface.
 */
export function instanceOfCellLink(value: object): value is CellLink {
    return true;
}

export function CellLinkFromJSON(json: any): CellLink {
    return CellLinkFromJSONTyped(json, false);
}

export function CellLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): CellLink {
    if (json == null) {
        return json;
    }
    return {
        
        'columnId': json['columnId'] == null ? undefined : json['columnId'],
        'rowId': json['rowId'] == null ? undefined : json['rowId'],
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'sheetName': json['sheetName'] == null ? undefined : json['sheetName'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function CellLinkToJSON(json: any): CellLink {
    return CellLinkToJSONTyped(json, false);
}

export function CellLinkToJSONTyped(value?: CellLink | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'columnId': value['columnId'],
        'rowId': value['rowId'],
        'sheetId': value['sheetId'],
        'sheetName': value['sheetName'],
        'status': value['status'],
    };
}

