/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * Attachment Object
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * Attachment Id.
     * @type {number}
     * @memberof Attachment
     */
    id?: number;
    /**
     * The Id of the parent.
     * @type {number}
     * @memberof Attachment
     */
    parentId?: number;
    /**
     * Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts.
     * @type {string}
     * @memberof Attachment
     */
    attachmentType?: AttachmentAttachmentTypeEnum;
    /**
     * Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values.
     * @type {string}
     * @memberof Attachment
     */
    attachmentSubType?: AttachmentAttachmentSubTypeEnum;
    /**
     * Attachment MIME type.
     * @type {string}
     * @memberof Attachment
     */
    mimeType?: string;
    /**
     * The type of object the attachment belongs to.
     * @type {string}
     * @memberof Attachment
     */
    parentType?: AttachmentParentTypeEnum;
    /**
     * 
     * @type {Timestamp}
     * @memberof Attachment
     */
    createdAt?: Timestamp;
    /**
     * `User` object containing `name` and `email` of the user who created this attachment.
     * 
     * @type {MiniUser}
     * @memberof Attachment
     */
    createdBy?: MiniUser;
    /**
     * Attachment name.
     * @type {string}
     * @memberof Attachment
     */
    name?: string;
    /**
     * The size of the file, if the attachmentType is FILE.
     * @type {number}
     * @memberof Attachment
     */
    sizeInKb?: number;
    /**
     * Attachment temporary URL (files only).
     * @type {string}
     * @memberof Attachment
     */
    url?: string;
    /**
     * Attachment temporary URL time to live (files only).
     * @type {number}
     * @memberof Attachment
     */
    urlExpiresInMillis?: number;
}


/**
 * @export
 */
export const AttachmentAttachmentTypeEnum = {
    BoxCom: 'BOX_COM',
    Dropbox: 'DROPBOX',
    Egnyte: 'EGNYTE',
    Evernote: 'EVERNOTE',
    File: 'FILE',
    GoogleDrive: 'GOOGLE_DRIVE',
    Link: 'LINK',
    Onedrive: 'ONEDRIVE',
    Trello: 'TRELLO'
} as const;
export type AttachmentAttachmentTypeEnum = typeof AttachmentAttachmentTypeEnum[keyof typeof AttachmentAttachmentTypeEnum];

/**
 * @export
 */
export const AttachmentAttachmentSubTypeEnum = {
    Document: 'DOCUMENT',
    Drawing: 'DRAWING',
    Folder: 'FOLDER',
    Pdf: 'PDF',
    Presentation: 'PRESENTATION',
    Spreadsheet: 'SPREADSHEET'
} as const;
export type AttachmentAttachmentSubTypeEnum = typeof AttachmentAttachmentSubTypeEnum[keyof typeof AttachmentAttachmentSubTypeEnum];

/**
 * @export
 */
export const AttachmentParentTypeEnum = {
    Comment: 'COMMENT',
    Proof: 'PROOF',
    Row: 'ROW',
    Sheet: 'SHEET'
} as const;
export type AttachmentParentTypeEnum = typeof AttachmentParentTypeEnum[keyof typeof AttachmentParentTypeEnum];


/**
 * Check if a given object implements the Attachment interface.
 */
export function instanceOfAttachment(value: object): value is Attachment {
    return true;
}

export function AttachmentFromJSON(json: any): Attachment {
    return AttachmentFromJSONTyped(json, false);
}

export function AttachmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attachment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'attachmentType': json['attachmentType'] == null ? undefined : json['attachmentType'],
        'attachmentSubType': json['attachmentSubType'] == null ? undefined : json['attachmentSubType'],
        'mimeType': json['mimeType'] == null ? undefined : json['mimeType'],
        'parentType': json['parentType'] == null ? undefined : json['parentType'],
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'createdBy': json['createdBy'] == null ? undefined : MiniUserFromJSON(json['createdBy']),
        'name': json['name'] == null ? undefined : json['name'],
        'sizeInKb': json['sizeInKb'] == null ? undefined : json['sizeInKb'],
        'url': json['url'] == null ? undefined : json['url'],
        'urlExpiresInMillis': json['urlExpiresInMillis'] == null ? undefined : json['urlExpiresInMillis'],
    };
}

export function AttachmentToJSON(json: any): Attachment {
    return AttachmentToJSONTyped(json, false);
}

export function AttachmentToJSONTyped(value?: Attachment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'parentId': value['parentId'],
        'attachmentType': value['attachmentType'],
        'attachmentSubType': value['attachmentSubType'],
        'mimeType': value['mimeType'],
        'parentType': value['parentType'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'createdBy': MiniUserToJSON(value['createdBy']),
        'name': value['name'],
        'sizeInKb': value['sizeInKb'],
        'url': value['url'],
        'urlExpiresInMillis': value['urlExpiresInMillis'],
    };
}

