/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ReadOnlyFullDefaultView } from './ReadOnlyFullDefaultView';
import {
    ReadOnlyFullDefaultViewFromJSON,
    ReadOnlyFullDefaultViewFromJSONTyped,
    ReadOnlyFullDefaultViewToJSON,
    ReadOnlyFullDefaultViewToJSONTyped,
} from './ReadOnlyFullDefaultView';
import type { ReadOnlyFullAccessibleBy } from './ReadOnlyFullAccessibleBy';
import {
    ReadOnlyFullAccessibleByFromJSON,
    ReadOnlyFullAccessibleByFromJSONTyped,
    ReadOnlyFullAccessibleByToJSON,
    ReadOnlyFullAccessibleByToJSONTyped,
} from './ReadOnlyFullAccessibleBy';
import type { ReadWriteDefaultView } from './ReadWriteDefaultView';
import {
    ReadWriteDefaultViewFromJSON,
    ReadWriteDefaultViewFromJSONTyped,
    ReadWriteDefaultViewToJSON,
    ReadWriteDefaultViewToJSONTyped,
} from './ReadWriteDefaultView';
import type { ReadWriteAccessibleBy } from './ReadWriteAccessibleBy';
import {
    ReadWriteAccessibleByFromJSON,
    ReadWriteAccessibleByFromJSONTyped,
    ReadWriteAccessibleByToJSON,
    ReadWriteAccessibleByToJSONTyped,
} from './ReadWriteAccessibleBy';

/**
 * Describes the sheet's publish settings. Used as a request body to set publish status.
 * @export
 * @interface SheetPublishRequest
 */
export interface SheetPublishRequest {
    /**
     * If **true**, a webcal is available for the calendar in the sheet.
     * @type {boolean}
     * @memberof SheetPublishRequest
     */
    icalEnabled?: boolean;
    /**
     * 
     * @type {ReadOnlyFullAccessibleBy}
     * @memberof SheetPublishRequest
     */
    readOnlyFullAccessibleBy?: ReadOnlyFullAccessibleBy;
    /**
     * 
     * @type {ReadOnlyFullDefaultView}
     * @memberof SheetPublishRequest
     */
    readOnlyFullDefaultView?: ReadOnlyFullDefaultView;
    /**
     * If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublishRequest
     */
    readOnlyFullEnabled?: boolean;
    /**
     * Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.
     * @type {boolean}
     * @memberof SheetPublishRequest
     * @deprecated
     */
    readOnlyFullShowToolbar?: boolean;
    /**
     * If **true**, a lightweight version of the sheet is published without row attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublishRequest
     */
    readOnlyLiteEnabled?: boolean;
    /**
     * 
     * @type {ReadWriteAccessibleBy}
     * @memberof SheetPublishRequest
     */
    readWriteAccessibleBy?: ReadWriteAccessibleBy;
    /**
     * 
     * @type {ReadWriteDefaultView}
     * @memberof SheetPublishRequest
     */
    readWriteDefaultView?: ReadWriteDefaultView;
    /**
     * If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublishRequest
     */
    readWriteEnabled?: boolean;
    /**
     * Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.
     * @type {boolean}
     * @memberof SheetPublishRequest
     * @deprecated
     */
    readWriteShowToolbar?: boolean;
}



/**
 * Check if a given object implements the SheetPublishRequest interface.
 */
export function instanceOfSheetPublishRequest(value: object): value is SheetPublishRequest {
    return true;
}

export function SheetPublishRequestFromJSON(json: any): SheetPublishRequest {
    return SheetPublishRequestFromJSONTyped(json, false);
}

export function SheetPublishRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SheetPublishRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'icalEnabled': json['icalEnabled'] == null ? undefined : json['icalEnabled'],
        'readOnlyFullAccessibleBy': json['readOnlyFullAccessibleBy'] == null ? undefined : ReadOnlyFullAccessibleByFromJSON(json['readOnlyFullAccessibleBy']),
        'readOnlyFullDefaultView': json['readOnlyFullDefaultView'] == null ? undefined : ReadOnlyFullDefaultViewFromJSON(json['readOnlyFullDefaultView']),
        'readOnlyFullEnabled': json['readOnlyFullEnabled'] == null ? undefined : json['readOnlyFullEnabled'],
        'readOnlyFullShowToolbar': json['readOnlyFullShowToolbar'] == null ? undefined : json['readOnlyFullShowToolbar'],
        'readOnlyLiteEnabled': json['readOnlyLiteEnabled'] == null ? undefined : json['readOnlyLiteEnabled'],
        'readWriteAccessibleBy': json['readWriteAccessibleBy'] == null ? undefined : ReadWriteAccessibleByFromJSON(json['readWriteAccessibleBy']),
        'readWriteDefaultView': json['readWriteDefaultView'] == null ? undefined : ReadWriteDefaultViewFromJSON(json['readWriteDefaultView']),
        'readWriteEnabled': json['readWriteEnabled'] == null ? undefined : json['readWriteEnabled'],
        'readWriteShowToolbar': json['readWriteShowToolbar'] == null ? undefined : json['readWriteShowToolbar'],
    };
}

export function SheetPublishRequestToJSON(json: any): SheetPublishRequest {
    return SheetPublishRequestToJSONTyped(json, false);
}

export function SheetPublishRequestToJSONTyped(value?: SheetPublishRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'icalEnabled': value['icalEnabled'],
        'readOnlyFullAccessibleBy': ReadOnlyFullAccessibleByToJSON(value['readOnlyFullAccessibleBy']),
        'readOnlyFullDefaultView': ReadOnlyFullDefaultViewToJSON(value['readOnlyFullDefaultView']),
        'readOnlyFullEnabled': value['readOnlyFullEnabled'],
        'readOnlyFullShowToolbar': value['readOnlyFullShowToolbar'],
        'readOnlyLiteEnabled': value['readOnlyLiteEnabled'],
        'readWriteAccessibleBy': ReadWriteAccessibleByToJSON(value['readWriteAccessibleBy']),
        'readWriteDefaultView': ReadWriteDefaultViewToJSON(value['readWriteDefaultView']),
        'readWriteEnabled': value['readWriteEnabled'],
        'readWriteShowToolbar': value['readWriteShowToolbar'],
    };
}

