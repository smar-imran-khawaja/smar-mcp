/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { TimestampWriteable } from './TimestampWriteable';
import {
    TimestampWriteableFromJSON,
    TimestampWriteableFromJSONTyped,
    TimestampWriteableToJSON,
    TimestampWriteableToJSONTyped,
} from './TimestampWriteable';

/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * Type of schedule.
     * @type {string}
     * @memberof Schedule
     */
    type?: ScheduleTypeEnum;
    /**
     * A string array consists of one or more of the following values:
     * * **DAY**, **WEEKDAY**, **WEEKEND**
     * * **SUNDAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**
     * 
     * The subset of values applicable to the schedule type are as followed:
     * 
     * | Value         | Daily schedule | Weekly schedule | Monthly schedule |
     * |---------------|----------------|-----------------|------------------|
     * | **DAY**       |                |                 |       **✓**      |
     * | **WEEKDAY**   |      **✓**     |                 |       **✓**      |
     * | **WEEKEND**   |                |                 |       **✓**      |
     * | **SUNDAY**    |                |      **✓**      |       **✓**      |
     * | **MONDAY**    |                |      **✓**      |       **✓**      |
     * | **TUESDAY**   |                |      **✓**      |       **✓**      |
     * | **WEDNESDAY** |                |      **✓**      |       **✓**      |
     * | **THURSDAY**  |                |      **✓**      |       **✓**      |
     * | **FRIDAY**    |                |      **✓**      |       **✓**      |
     * | **SATURDAY**  |                |      **✓**      |       **✓**      |
     * 
     * For more details, refer to the Table of Schedule Object’s Attributes below.
     * 
     * @type {Array<string>}
     * @memberof Schedule
     */
    dayDescriptors?: Array<ScheduleDayDescriptorsEnum>;
    /**
     * The day within the month.
     * 
     * Valid range is 1 to 28.
     * 
     * This attribute is applicable to the following schedule type:
     *  * **MONTHLY**
     * 
     * For more details, refer to the Table of Schedule Object’s Attributes below.
     * 
     * @type {number}
     * @memberof Schedule
     */
    dayOfMonth?: number;
    /**
     * Must be one of the following values:
     *   * **FIRST** or **LAST**
     *   * **SECOND**, **THIRD**, or **FOURTH**
     * 
     * This attribute is applicable to the following schedule type:
     *   * **MONTHLY**
     * 
     *   For more details, refer to the Table of Schedule Object’s Attributes below.
     * 
     * @type {string}
     * @memberof Schedule
     */
    dayOrdinal?: ScheduleDayOrdinalEnum;
    /**
     * Frequency on which the request is delivered. The unit is a function of the **type** attribute. For example,
     * for **MONTHLY** schedule, **repeatEvery=1** means every month.
     * 
     * Valid range is 1 to 99.
     * 
     * This attribute is applicable to the following schedule types: **DAILY**, **WEEKLY**, **MONTHLY**, or **YEARLY**.
     * For more details, refer to the Table of Schedule Object’s Attributes below.
     * 
     * @type {number}
     * @memberof Schedule
     */
    repeatEvery?: number;
    /**
     * 
     * @type {TimestampWriteable}
     * @memberof Schedule
     */
    endAt?: TimestampWriteable;
    /**
     * 
     * @type {Timestamp}
     * @memberof Schedule
     */
    lastSentAt?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof Schedule
     */
    nextSendAt?: Timestamp;
    /**
     * 
     * @type {TimestampWriteable}
     * @memberof Schedule
     */
    startAt?: TimestampWriteable;
}


/**
 * @export
 */
export const ScheduleTypeEnum = {
    Once: 'ONCE',
    Daily: 'DAILY',
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Yearly: 'YEARLY'
} as const;
export type ScheduleTypeEnum = typeof ScheduleTypeEnum[keyof typeof ScheduleTypeEnum];

/**
 * @export
 */
export const ScheduleDayDescriptorsEnum = {
    Day: 'DAY',
    Weekday: 'WEEKDAY',
    Weekend: 'WEEKEND',
    Sunday: 'SUNDAY',
    Monday: 'MONDAY',
    Tuesday: 'TUESDAY',
    Wednesday: 'WEDNESDAY',
    Thursday: 'THURSDAY',
    Friday: 'FRIDAY',
    Saturday: 'SATURDAY'
} as const;
export type ScheduleDayDescriptorsEnum = typeof ScheduleDayDescriptorsEnum[keyof typeof ScheduleDayDescriptorsEnum];

/**
 * @export
 */
export const ScheduleDayOrdinalEnum = {
    First: 'FIRST',
    Last: 'LAST',
    Second: 'SECOND',
    Third: 'THIRD',
    Fourth: 'FOURTH'
} as const;
export type ScheduleDayOrdinalEnum = typeof ScheduleDayOrdinalEnum[keyof typeof ScheduleDayOrdinalEnum];


/**
 * Check if a given object implements the Schedule interface.
 */
export function instanceOfSchedule(value: object): value is Schedule {
    return true;
}

export function ScheduleFromJSON(json: any): Schedule {
    return ScheduleFromJSONTyped(json, false);
}

export function ScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schedule {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'dayDescriptors': json['dayDescriptors'] == null ? undefined : json['dayDescriptors'],
        'dayOfMonth': json['dayOfMonth'] == null ? undefined : json['dayOfMonth'],
        'dayOrdinal': json['dayOrdinal'] == null ? undefined : json['dayOrdinal'],
        'repeatEvery': json['repeatEvery'] == null ? undefined : json['repeatEvery'],
        'endAt': json['endAt'] == null ? undefined : TimestampWriteableFromJSON(json['endAt']),
        'lastSentAt': json['lastSentAt'] == null ? undefined : TimestampFromJSON(json['lastSentAt']),
        'nextSendAt': json['nextSendAt'] == null ? undefined : TimestampFromJSON(json['nextSendAt']),
        'startAt': json['startAt'] == null ? undefined : TimestampWriteableFromJSON(json['startAt']),
    };
}

export function ScheduleToJSON(json: any): Schedule {
    return ScheduleToJSONTyped(json, false);
}

export function ScheduleToJSONTyped(value?: Schedule | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'dayDescriptors': value['dayDescriptors'],
        'dayOfMonth': value['dayOfMonth'],
        'dayOrdinal': value['dayOrdinal'],
        'repeatEvery': value['repeatEvery'],
        'endAt': TimestampWriteableToJSON(value['endAt']),
        'lastSentAt': TimestampToJSON(value['lastSentAt']),
        'nextSendAt': TimestampToJSON(value['nextSendAt']),
        'startAt': TimestampWriteableToJSON(value['startAt']),
    };
}

