/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface URLAttachmentRequest
 */
export interface URLAttachmentRequest {
    /**
     * Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values.
     * @type {string}
     * @memberof URLAttachmentRequest
     */
    attachmentSubType?: URLAttachmentRequestAttachmentSubTypeEnum;
    /**
     * Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts.
     * @type {string}
     * @memberof URLAttachmentRequest
     */
    attachmentType?: URLAttachmentRequestAttachmentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof URLAttachmentRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof URLAttachmentRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof URLAttachmentRequest
     */
    url?: string;
}


/**
 * @export
 */
export const URLAttachmentRequestAttachmentSubTypeEnum = {
    Document: 'DOCUMENT',
    Drawing: 'DRAWING',
    Folder: 'FOLDER',
    Pdf: 'PDF',
    Presentation: 'PRESENTATION',
    Spreadsheet: 'SPREADSHEET'
} as const;
export type URLAttachmentRequestAttachmentSubTypeEnum = typeof URLAttachmentRequestAttachmentSubTypeEnum[keyof typeof URLAttachmentRequestAttachmentSubTypeEnum];

/**
 * @export
 */
export const URLAttachmentRequestAttachmentTypeEnum = {
    BoxCom: 'BOX_COM',
    Dropbox: 'DROPBOX',
    Egnyte: 'EGNYTE',
    Evernote: 'EVERNOTE',
    File: 'FILE',
    GoogleDrive: 'GOOGLE_DRIVE',
    Link: 'LINK',
    Onedrive: 'ONEDRIVE',
    Trello: 'TRELLO'
} as const;
export type URLAttachmentRequestAttachmentTypeEnum = typeof URLAttachmentRequestAttachmentTypeEnum[keyof typeof URLAttachmentRequestAttachmentTypeEnum];


/**
 * Check if a given object implements the URLAttachmentRequest interface.
 */
export function instanceOfURLAttachmentRequest(value: object): value is URLAttachmentRequest {
    return true;
}

export function URLAttachmentRequestFromJSON(json: any): URLAttachmentRequest {
    return URLAttachmentRequestFromJSONTyped(json, false);
}

export function URLAttachmentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): URLAttachmentRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'attachmentSubType': json['attachmentSubType'] == null ? undefined : json['attachmentSubType'],
        'attachmentType': json['attachmentType'] == null ? undefined : json['attachmentType'],
        'description': json['description'] == null ? undefined : json['description'],
        'name': json['name'] == null ? undefined : json['name'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function URLAttachmentRequestToJSON(json: any): URLAttachmentRequest {
    return URLAttachmentRequestToJSONTyped(json, false);
}

export function URLAttachmentRequestToJSONTyped(value?: URLAttachmentRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attachmentSubType': value['attachmentSubType'],
        'attachmentType': value['attachmentType'],
        'description': value['description'],
        'name': value['name'],
        'url': value['url'],
    };
}

