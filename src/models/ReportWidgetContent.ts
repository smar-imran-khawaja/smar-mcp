/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { WidgetHyperlink } from './WidgetHyperlink';
import {
    WidgetHyperlinkFromJSON,
    WidgetHyperlinkFromJSONTyped,
    WidgetHyperlinkToJSON,
    WidgetHyperlinkToJSONTyped,
} from './WidgetHyperlink';

/**
 * 
 * @export
 * @interface ReportWidgetContent
 */
export interface ReportWidgetContent {
    /**
     * 
     * @type {string}
     * @memberof ReportWidgetContent
     */
    type?: ReportWidgetContentTypeEnum;
    /**
     * Report Id denoting container source.
     * @type {number}
     * @memberof ReportWidgetContent
     */
    reportId?: number;
    /**
     * HTMl snippet to render report.
     * @type {string}
     * @memberof ReportWidgetContent
     */
    htmlContent?: string;
    /**
     * The hex color.
     * @type {string}
     * @memberof ReportWidgetContent
     */
    backgroundColor?: string;
    /**
     * 
     * @type {WidgetHyperlink}
     * @memberof ReportWidgetContent
     */
    hyperlink?: WidgetHyperlink;
}


/**
 * @export
 */
export const ReportWidgetContentTypeEnum = {
    Gridgantt: 'GRIDGANTT'
} as const;
export type ReportWidgetContentTypeEnum = typeof ReportWidgetContentTypeEnum[keyof typeof ReportWidgetContentTypeEnum];


/**
 * Check if a given object implements the ReportWidgetContent interface.
 */
export function instanceOfReportWidgetContent(value: object): value is ReportWidgetContent {
    return true;
}

export function ReportWidgetContentFromJSON(json: any): ReportWidgetContent {
    return ReportWidgetContentFromJSONTyped(json, false);
}

export function ReportWidgetContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportWidgetContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'reportId': json['reportId'] == null ? undefined : json['reportId'],
        'htmlContent': json['htmlContent'] == null ? undefined : json['htmlContent'],
        'backgroundColor': json['backgroundColor'] == null ? undefined : json['backgroundColor'],
        'hyperlink': json['hyperlink'] == null ? undefined : WidgetHyperlinkFromJSON(json['hyperlink']),
    };
}

export function ReportWidgetContentToJSON(json: any): ReportWidgetContent {
    return ReportWidgetContentToJSONTyped(json, false);
}

export function ReportWidgetContentToJSONTyped(value?: ReportWidgetContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'reportId': value['reportId'],
        'htmlContent': value['htmlContent'],
        'backgroundColor': value['backgroundColor'],
        'hyperlink': WidgetHyperlinkToJSON(value['hyperlink']),
    };
}

