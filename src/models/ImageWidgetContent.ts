/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { WidgetHyperlink } from './WidgetHyperlink';
import {
    WidgetHyperlinkFromJSON,
    WidgetHyperlinkFromJSONTyped,
    WidgetHyperlinkToJSON,
    WidgetHyperlinkToJSONTyped,
} from './WidgetHyperlink';

/**
 * 
 * @export
 * @interface ImageWidgetContent
 */
export interface ImageWidgetContent {
    /**
     * 
     * @type {string}
     * @memberof ImageWidgetContent
     */
    type?: ImageWidgetContentTypeEnum;
    /**
     * The image private Id.
     * @type {string}
     * @memberof ImageWidgetContent
     */
    privateId?: string;
    /**
     * Name of the image file.
     * @type {string}
     * @memberof ImageWidgetContent
     */
    fileName?: string;
    /**
     * Describes how the image occupies the available space of its widget.
     *  * ACTUAL_SIZE - Uses the original image width and height dimensions.
     *  * FILL - Scales the image to maintain its aspect ratio while filling its entire widget. If the image aspect 
     * ratio does not match the aspect ratio of its widget, then the image will be clipped to fit.
     *  * FIT - Scales the image to maintain its aspect ratio while fitting within its widget. The image will be 
     * "letterboxed" if its aspect ratio does not match the aspect ratio of its widget. Default value for new  image widgets and for existing image widgets where this property has not been explicitly set.
     * 
     * @type {string}
     * @memberof ImageWidgetContent
     */
    fit?: ImageWidgetContentFitEnum;
    /**
     * Format descriptor. Follows the pattern in FormatTables.
     * @type {string}
     * @memberof ImageWidgetContent
     */
    format?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageWidgetContent
     */
    height?: number;
    /**
     * 
     * @type {WidgetHyperlink}
     * @memberof ImageWidgetContent
     */
    hyperlink?: WidgetHyperlink;
    /**
     * Indicates whether there is margin between the image and its widget borders.
     *  * MARGIN - Default value for existing image widgets where this property has not been explicitly set.
     *  * NO_MARGIN - Default value for new image widgets.
     * 
     * @type {string}
     * @memberof ImageWidgetContent
     */
    margin?: ImageWidgetContentMarginEnum;
    /**
     * Original width of the image in pixels.
     * @type {number}
     * @memberof ImageWidgetContent
     */
    width?: number;
}


/**
 * @export
 */
export const ImageWidgetContentTypeEnum = {
    Image: 'IMAGE'
} as const;
export type ImageWidgetContentTypeEnum = typeof ImageWidgetContentTypeEnum[keyof typeof ImageWidgetContentTypeEnum];

/**
 * @export
 */
export const ImageWidgetContentFitEnum = {
    ActualSize: 'ACTUAL_SIZE',
    Fill: 'FILL',
    Fit: 'FIT'
} as const;
export type ImageWidgetContentFitEnum = typeof ImageWidgetContentFitEnum[keyof typeof ImageWidgetContentFitEnum];

/**
 * @export
 */
export const ImageWidgetContentMarginEnum = {
    Margin: 'MARGIN',
    NoMargin: 'NO_MARGIN'
} as const;
export type ImageWidgetContentMarginEnum = typeof ImageWidgetContentMarginEnum[keyof typeof ImageWidgetContentMarginEnum];


/**
 * Check if a given object implements the ImageWidgetContent interface.
 */
export function instanceOfImageWidgetContent(value: object): value is ImageWidgetContent {
    return true;
}

export function ImageWidgetContentFromJSON(json: any): ImageWidgetContent {
    return ImageWidgetContentFromJSONTyped(json, false);
}

export function ImageWidgetContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageWidgetContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'privateId': json['privateId'] == null ? undefined : json['privateId'],
        'fileName': json['fileName'] == null ? undefined : json['fileName'],
        'fit': json['fit'] == null ? undefined : json['fit'],
        'format': json['format'] == null ? undefined : json['format'],
        'height': json['height'] == null ? undefined : json['height'],
        'hyperlink': json['hyperlink'] == null ? undefined : WidgetHyperlinkFromJSON(json['hyperlink']),
        'margin': json['margin'] == null ? undefined : json['margin'],
        'width': json['width'] == null ? undefined : json['width'],
    };
}

export function ImageWidgetContentToJSON(json: any): ImageWidgetContent {
    return ImageWidgetContentToJSONTyped(json, false);
}

export function ImageWidgetContentToJSONTyped(value?: ImageWidgetContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'privateId': value['privateId'],
        'fileName': value['fileName'],
        'fit': value['fit'],
        'format': value['format'],
        'height': value['height'],
        'hyperlink': WidgetHyperlinkToJSON(value['hyperlink']),
        'margin': value['margin'],
        'width': value['width'],
    };
}

