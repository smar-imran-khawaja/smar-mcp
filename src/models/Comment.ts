/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Array of attachments on comments.
     * @type {Array<Attachment>}
     * @memberof Comment
     */
    attachments?: Array<Attachment>;
    /**
     * 
     * @type {Timestamp}
     * @memberof Comment
     */
    createdAt?: Timestamp;
    /**
     * User object containing name and email of the creator of this comment.
     * @type {MiniUser}
     * @memberof Comment
     */
    createdBy?: MiniUser;
    /**
     * Discussion Id of discussion that contains comment.
     * @type {number}
     * @memberof Comment
     */
    discussionId?: number;
    /**
     * Comment Id.
     * @type {number}
     * @memberof Comment
     */
    id?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof Comment
     */
    modifiedAt?: Timestamp;
    /**
     * Comment body.
     * @type {string}
     * @memberof Comment
     */
    text?: string;
}

/**
 * Check if a given object implements the Comment interface.
 */
export function instanceOfComment(value: object): value is Comment {
    return true;
}

export function CommentFromJSON(json: any): Comment {
    return CommentFromJSONTyped(json, false);
}

export function CommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Comment {
    if (json == null) {
        return json;
    }
    return {
        
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'createdBy': json['createdBy'] == null ? undefined : MiniUserFromJSON(json['createdBy']),
        'discussionId': json['discussionId'] == null ? undefined : json['discussionId'],
        'id': json['id'] == null ? undefined : json['id'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'text': json['text'] == null ? undefined : json['text'],
    };
}

export function CommentToJSON(json: any): Comment {
    return CommentToJSONTyped(json, false);
}

export function CommentToJSONTyped(value?: Comment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'createdAt': TimestampToJSON(value['createdAt']),
        'createdBy': MiniUserToJSON(value['createdBy']),
        'discussionId': value['discussionId'],
        'id': value['id'],
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'text': value['text'],
    };
}

