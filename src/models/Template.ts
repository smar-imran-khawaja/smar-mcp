/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';

/**
 * A template can be used to create a sheet.
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * Template Id.
     * @type {number}
     * @memberof Template
     */
    id?: number;
    /**
     * Type of template. Only applicable to public templates.
     * @type {string}
     * @memberof Template
     */
    type?: TemplateTypeEnum;
    /**
     * 
     * @type {AccessLevel}
     * @memberof Template
     */
    accessLevel?: AccessLevel;
    /**
     * Indicates whether the template is blank. Only applicable to public templates.
     * @type {boolean}
     * @memberof Template
     */
    blank?: boolean;
    /**
     * Indicates whether the template is blank. Only applicable to public templates.
     * @type {Array<string>}
     * @memberof Template
     */
    categories?: Array<string>;
    /**
     * Template description.
     * @type {string}
     * @memberof Template
     */
    description?: string;
    /**
     * Type of global template. Only applicable to blank public templates.
     * @type {string}
     * @memberof Template
     */
    globalTemplate?: TemplateGlobalTemplateEnum;
    /**
     * URL to the small preview image for this template. Only applicable to non-blank public templates.
     * @type {string}
     * @memberof Template
     */
    image?: string;
    /**
     * URL to the large preview image for this template. Only applicable to non-blank public templates.
     * @type {string}
     * @memberof Template
     */
    largeImage?: string;
    /**
     * Locale of the template. Only applicable to public templates.
     * @type {string}
     * @memberof Template
     */
    locale?: TemplateLocaleEnum;
    /**
     * Type of global template.
     * @type {string}
     * @memberof Template
     */
    name?: string;
    /**
     * List of search tags for this template. Only applicable to non-blank public templates.
     * @type {Array<string>}
     * @memberof Template
     */
    tags?: Array<string>;
}


/**
 * @export
 */
export const TemplateTypeEnum = {
    Report: 'report',
    Sheet: 'sheet'
} as const;
export type TemplateTypeEnum = typeof TemplateTypeEnum[keyof typeof TemplateTypeEnum];

/**
 * @export
 */
export const TemplateGlobalTemplateEnum = {
    BlankSheet: 'BLANK_SHEET',
    ProjectSheet: 'PROJECT_SHEET',
    TaskList: 'TASK_LIST'
} as const;
export type TemplateGlobalTemplateEnum = typeof TemplateGlobalTemplateEnum[keyof typeof TemplateGlobalTemplateEnum];

/**
 * @export
 */
export const TemplateLocaleEnum = {
    ArAe: 'ar_AE',
    ArBh: 'ar_BH',
    ArDz: 'ar_DZ',
    ArEg: 'ar_EG',
    ArIq: 'ar_IQ',
    ArJo: 'ar_JO',
    ArKw: 'ar_KW',
    ArLb: 'ar_LB',
    ArLy: 'ar_LY',
    ArMa: 'ar_MA',
    ArOm: 'ar_OM',
    ArQa: 'ar_QA',
    ArSa: 'ar_SA',
    ArSd: 'ar_SD',
    ArSy: 'ar_SY',
    ArTn: 'ar_TN',
    ArYe: 'ar_YE',
    BeBy: 'be_BY',
    BgBg: 'bg_BG',
    CaEs: 'ca_ES',
    CsCz: 'cs_CZ',
    DaDk: 'da_DK',
    DeAt: 'de_AT',
    DeCh: 'de_CH',
    DeDe: 'de_DE',
    DeLu: 'de_LU',
    ElCy: 'el_CY',
    ElGr: 'el_GR',
    EnAu: 'en_AU',
    EnCa: 'en_CA',
    EnGb: 'en_GB',
    EnIe: 'en_IE',
    EnIn: 'en_IN',
    EnMt: 'en_MT',
    EnNz: 'en_NZ',
    EnPh: 'en_PH',
    EnSg: 'en_SG',
    EnUs: 'en_US',
    EnZa: 'en_ZA',
    EsAr: 'es_AR',
    EsBo: 'es_BO',
    EsCl: 'es_CL',
    EsCo: 'es_CO',
    EsCr: 'es_CR',
    EsDo: 'es_DO',
    EsEc: 'es_EC',
    EsEs: 'es_ES',
    EsGt: 'es_GT',
    EsHn: 'es_HN',
    EsMx: 'es_MX',
    EsNi: 'es_NI',
    EsPa: 'es_PA',
    EsPe: 'es_PE',
    EsPr: 'es_PR',
    EsPy: 'es_PY',
    EsSv: 'es_SV',
    EsUs: 'es_US',
    EsUy: 'es_UY',
    EsVe: 'es_VE',
    EtEe: 'et_EE',
    FiFi: 'fi_FI',
    FrBe: 'fr_BE',
    FrCa: 'fr_CA',
    FrCh: 'fr_CH',
    FrFr: 'fr_FR',
    FrLu: 'fr_LU',
    GaIe: 'ga_IE',
    HiUs: 'hi_US',
    HrHr: 'hr_HR',
    HuHu: 'hu_HU',
    InId: 'in_ID',
    IsIs: 'is_IS',
    ItCh: 'it_CH',
    ItIt: 'it_IT',
    IwIl: 'iw_IL',
    JaJp: 'ja_JP',
    KoKr: 'ko_KR',
    LtLt: 'lt_LT',
    LvLv: 'lv_LV',
    MkMk: 'mk_MK',
    MsMy: 'ms_MY',
    MtMt: 'mt_MT',
    NlBe: 'nl_BE',
    NlNl: 'nl_NL',
    NoNo: 'no_NO',
    PlPl: 'pl_PL',
    PtBr: 'pt_BR',
    PtPt: 'pt_PT',
    RoRo: 'ro_RO',
    RuRu: 'ru_RU',
    SkSk: 'sk_SK',
    SlSi: 'sl_SI',
    SqAl: 'sq_AL',
    SrBa: 'sr_BA',
    SrCs: 'sr_CS',
    SvSe: 'sv_SE',
    ThUs: 'th_US',
    TrTr: 'tr_TR',
    UkUa: 'uk_UA',
    ViVn: 'vi_VN',
    ZhCn: 'zh_CN',
    ZhHk: 'zh_HK',
    ZhSg: 'zh_SG',
    ZhTw: 'zh_TW'
} as const;
export type TemplateLocaleEnum = typeof TemplateLocaleEnum[keyof typeof TemplateLocaleEnum];


/**
 * Check if a given object implements the Template interface.
 */
export function instanceOfTemplate(value: object): value is Template {
    return true;
}

export function TemplateFromJSON(json: any): Template {
    return TemplateFromJSONTyped(json, false);
}

export function TemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Template {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'blank': json['blank'] == null ? undefined : json['blank'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'description': json['description'] == null ? undefined : json['description'],
        'globalTemplate': json['globalTemplate'] == null ? undefined : json['globalTemplate'],
        'image': json['image'] == null ? undefined : json['image'],
        'largeImage': json['largeImage'] == null ? undefined : json['largeImage'],
        'locale': json['locale'] == null ? undefined : json['locale'],
        'name': json['name'] == null ? undefined : json['name'],
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}

export function TemplateToJSON(json: any): Template {
    return TemplateToJSONTyped(json, false);
}

export function TemplateToJSONTyped(value?: Template | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'blank': value['blank'],
        'categories': value['categories'],
        'description': value['description'],
        'globalTemplate': value['globalTemplate'],
        'image': value['image'],
        'largeImage': value['largeImage'],
        'locale': value['locale'],
        'name': value['name'],
        'tags': value['tags'],
    };
}

