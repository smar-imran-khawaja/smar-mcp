/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CellObjectForRows } from './CellObjectForRows';
import {
    CellObjectForRowsFromJSON,
    CellObjectForRowsFromJSONTyped,
    CellObjectForRowsToJSON,
    CellObjectForRowsToJSONTyped,
} from './CellObjectForRows';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface AddRowsObject
 */
export interface AddRowsObject {
    /**
     * Row Id.
     * @type {number}
     * @memberof AddRowsObject
     */
    id?: number;
    /**
     * Parent sheet Id.
     * @type {number}
     * @memberof AddRowsObject
     */
    sheetId?: number;
    /**
     * Row number within the sheet.
     * @type {number}
     * @memberof AddRowsObject
     */
    rowNumber?: number;
    /**
     * Indicates whether the row is expanded or collapsed.
     * @type {boolean}
     * @memberof AddRowsObject
     */
    expanded?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof AddRowsObject
     */
    createdAt?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof AddRowsObject
     */
    modifiedAt?: Timestamp;
    /**
     * Cells objects.
     * @type {Array<CellObjectForRows>}
     * @memberof AddRowsObject
     */
    cells?: Array<CellObjectForRows>;
    /**
     * Sheet version number that is incremented every time a sheet is modified.
     * @type {number}
     * @memberof AddRowsObject
     */
    version?: number;
}

/**
 * Check if a given object implements the AddRowsObject interface.
 */
export function instanceOfAddRowsObject(value: object): value is AddRowsObject {
    return true;
}

export function AddRowsObjectFromJSON(json: any): AddRowsObject {
    return AddRowsObjectFromJSONTyped(json, false);
}

export function AddRowsObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddRowsObject {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'rowNumber': json['rowNumber'] == null ? undefined : json['rowNumber'],
        'expanded': json['expanded'] == null ? undefined : json['expanded'],
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'cells': json['cells'] == null ? undefined : ((json['cells'] as Array<any>).map(CellObjectForRowsFromJSON)),
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function AddRowsObjectToJSON(json: any): AddRowsObject {
    return AddRowsObjectToJSONTyped(json, false);
}

export function AddRowsObjectToJSONTyped(value?: AddRowsObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'sheetId': value['sheetId'],
        'rowNumber': value['rowNumber'],
        'expanded': value['expanded'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'cells': value['cells'] == null ? undefined : ((value['cells'] as Array<any>).map(CellObjectForRowsToJSON)),
        'version': value['version'],
    };
}

