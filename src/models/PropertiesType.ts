/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const PropertiesType = {
    AbstractDatetime: 'ABSTRACT_DATETIME',
    Checkbox: 'CHECKBOX',
    ContactList: 'CONTACT_LIST',
    Date: 'DATE',
    Datetime: 'DATETIME',
    Duration: 'DURATION',
    MultiContactList: 'MULTI_CONTACT_LIST',
    MultiPicklist: 'MULTI_PICKLIST',
    Picklist: 'PICKLIST',
    Predecessor: 'PREDECESSOR',
    TextNumber: 'TEXT_NUMBER'
} as const;
export type PropertiesType = typeof PropertiesType[keyof typeof PropertiesType];


export function instanceOfPropertiesType(value: any): boolean {
    for (const key in PropertiesType) {
        if (Object.prototype.hasOwnProperty.call(PropertiesType, key)) {
            if (PropertiesType[key as keyof typeof PropertiesType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function PropertiesTypeFromJSON(json: any): PropertiesType {
    return PropertiesTypeFromJSONTyped(json, false);
}

export function PropertiesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertiesType {
    return json as PropertiesType;
}

export function PropertiesTypeToJSON(value?: PropertiesType | null): any {
    return value as any;
}

export function PropertiesTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): PropertiesType {
    return value as PropertiesType;
}

