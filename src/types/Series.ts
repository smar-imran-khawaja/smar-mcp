/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SeriesData } from './SeriesData';
import {
    SeriesDataFromJSON,
    SeriesDataFromJSONTyped,
    SeriesDataToJSON,
    SeriesDataToJSONTyped,
} from './SeriesData';
import type { ChartColumnInfo } from './ChartColumnInfo';
import {
    ChartColumnInfoFromJSON,
    ChartColumnInfoFromJSONTyped,
    ChartColumnInfoToJSON,
    ChartColumnInfoToJSONTyped,
} from './ChartColumnInfo';
import type { SelectionRange } from './SelectionRange';
import {
    SelectionRangeFromJSON,
    SelectionRangeFromJSONTyped,
    SelectionRangeToJSON,
    SelectionRangeToJSONTyped,
} from './SelectionRange';
import type { ChartTooltipStyle } from './ChartTooltipStyle';
import {
    ChartTooltipStyleFromJSON,
    ChartTooltipStyleFromJSONTyped,
    ChartTooltipStyleToJSON,
    ChartTooltipStyleToJSONTyped,
} from './ChartTooltipStyle';
import type { WidgetChartDataLabel } from './WidgetChartDataLabel';
import {
    WidgetChartDataLabelFromJSON,
    WidgetChartDataLabelFromJSONTyped,
    WidgetChartDataLabelToJSON,
    WidgetChartDataLabelToJSONTyped,
} from './WidgetChartDataLabel';

/**
 * 
 * @export
 * @interface Series
 */
export interface Series {
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    title?: string;
    /**
     * 
     * @type {ChartColumnInfo}
     * @memberof Series
     */
    titleInfo?: ChartColumnInfo;
    /**
     * Series title format (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)).
     * @type {string}
     * @memberof Series
     */
    seriesTitleFormat?: string;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    seriesType?: SeriesSeriesTypeEnum;
    /**
     * 
     * @type {WidgetChartDataLabel}
     * @memberof Series
     */
    dataLabels?: WidgetChartDataLabel;
    /**
     * 
     * @type {ChartTooltipStyle}
     * @memberof Series
     */
    tooltips?: ChartTooltipStyle;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    lineType?: SeriesLineTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Series
     */
    holeSize?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Series
     */
    isFilled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Series
     */
    isHalf?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Series
     */
    isStacked?: boolean;
    /**
     * The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.
     * @type {string}
     * @memberof Series
     */
    xFormat?: string;
    /**
     * The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.
     * @type {string}
     * @memberof Series
     */
    yFormat?: string;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    axisLocationX?: SeriesAxisLocationXEnum;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    axisLocationY?: SeriesAxisLocationYEnum;
    /**
     * 
     * @type {ChartColumnInfo}
     * @memberof Series
     */
    yColumnInfo?: ChartColumnInfo;
    /**
     * 
     * @type {ChartColumnInfo}
     * @memberof Series
     */
    xColumnInfo?: ChartColumnInfo;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    seriesSelectionOrder?: SeriesSeriesSelectionOrderEnum;
    /**
     * 
     * @type {Array<SeriesData>}
     * @memberof Series
     */
    seriesData?: Array<SeriesData>;
    /**
     * 
     * @type {Array<SelectionRange>}
     * @memberof Series
     */
    selectionRanges?: Array<SelectionRange>;
}


/**
 * @export
 */
export const SeriesSeriesTypeEnum = {
    Area: 'AREA',
    Bar: 'BAR',
    Column: 'COLUMN',
    Line: 'LINE',
    Pie: 'PIE',
    Scatter: 'SCATTER'
} as const;
export type SeriesSeriesTypeEnum = typeof SeriesSeriesTypeEnum[keyof typeof SeriesSeriesTypeEnum];

/**
 * @export
 */
export const SeriesLineTypeEnum = {
    Curved: 'CURVED',
    Stepped: 'STEPPED',
    Straight: 'STRAIGHT'
} as const;
export type SeriesLineTypeEnum = typeof SeriesLineTypeEnum[keyof typeof SeriesLineTypeEnum];

/**
 * @export
 */
export const SeriesAxisLocationXEnum = {
    Bottom: 'BOTTOM',
    Left: 'LEFT',
    None: 'NONE',
    Right: 'RIGHT',
    Top: 'TOP'
} as const;
export type SeriesAxisLocationXEnum = typeof SeriesAxisLocationXEnum[keyof typeof SeriesAxisLocationXEnum];

/**
 * @export
 */
export const SeriesAxisLocationYEnum = {
    Bottom: 'BOTTOM',
    Left: 'LEFT',
    None: 'NONE',
    Right: 'RIGHT',
    Top: 'TOP'
} as const;
export type SeriesAxisLocationYEnum = typeof SeriesAxisLocationYEnum[keyof typeof SeriesAxisLocationYEnum];

/**
 * @export
 */
export const SeriesSeriesSelectionOrderEnum = {
    Columns: 'COLUMNS',
    Rows: 'ROWS'
} as const;
export type SeriesSeriesSelectionOrderEnum = typeof SeriesSeriesSelectionOrderEnum[keyof typeof SeriesSeriesSelectionOrderEnum];


/**
 * Check if a given object implements the Series interface.
 */
export function instanceOfSeries(value: object): value is Series {
    return true;
}

export function SeriesFromJSON(json: any): Series {
    return SeriesFromJSONTyped(json, false);
}

export function SeriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Series {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'titleInfo': json['titleInfo'] == null ? undefined : ChartColumnInfoFromJSON(json['titleInfo']),
        'seriesTitleFormat': json['seriesTitleFormat'] == null ? undefined : json['seriesTitleFormat'],
        'seriesType': json['seriesType'] == null ? undefined : json['seriesType'],
        'dataLabels': json['dataLabels'] == null ? undefined : WidgetChartDataLabelFromJSON(json['dataLabels']),
        'tooltips': json['tooltips'] == null ? undefined : ChartTooltipStyleFromJSON(json['tooltips']),
        'lineType': json['lineType'] == null ? undefined : json['lineType'],
        'holeSize': json['holeSize'] == null ? undefined : json['holeSize'],
        'isFilled': json['isFilled'] == null ? undefined : json['isFilled'],
        'isHalf': json['isHalf'] == null ? undefined : json['isHalf'],
        'isStacked': json['isStacked'] == null ? undefined : json['isStacked'],
        'xFormat': json['xFormat'] == null ? undefined : json['xFormat'],
        'yFormat': json['yFormat'] == null ? undefined : json['yFormat'],
        'color': json['color'] == null ? undefined : json['color'],
        'axisLocationX': json['axisLocationX'] == null ? undefined : json['axisLocationX'],
        'axisLocationY': json['axisLocationY'] == null ? undefined : json['axisLocationY'],
        'yColumnInfo': json['yColumnInfo'] == null ? undefined : ChartColumnInfoFromJSON(json['yColumnInfo']),
        'xColumnInfo': json['xColumnInfo'] == null ? undefined : ChartColumnInfoFromJSON(json['xColumnInfo']),
        'seriesSelectionOrder': json['seriesSelectionOrder'] == null ? undefined : json['seriesSelectionOrder'],
        'seriesData': json['seriesData'] == null ? undefined : ((json['seriesData'] as Array<any>).map(SeriesDataFromJSON)),
        'selectionRanges': json['selectionRanges'] == null ? undefined : ((json['selectionRanges'] as Array<any>).map(SelectionRangeFromJSON)),
    };
}

export function SeriesToJSON(json: any): Series {
    return SeriesToJSONTyped(json, false);
}

export function SeriesToJSONTyped(value?: Series | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'titleInfo': ChartColumnInfoToJSON(value['titleInfo']),
        'seriesTitleFormat': value['seriesTitleFormat'],
        'seriesType': value['seriesType'],
        'dataLabels': WidgetChartDataLabelToJSON(value['dataLabels']),
        'tooltips': ChartTooltipStyleToJSON(value['tooltips']),
        'lineType': value['lineType'],
        'holeSize': value['holeSize'],
        'isFilled': value['isFilled'],
        'isHalf': value['isHalf'],
        'isStacked': value['isStacked'],
        'xFormat': value['xFormat'],
        'yFormat': value['yFormat'],
        'color': value['color'],
        'axisLocationX': value['axisLocationX'],
        'axisLocationY': value['axisLocationY'],
        'yColumnInfo': ChartColumnInfoToJSON(value['yColumnInfo']),
        'xColumnInfo': ChartColumnInfoToJSON(value['xColumnInfo']),
        'seriesSelectionOrder': value['seriesSelectionOrder'],
        'seriesData': value['seriesData'] == null ? undefined : ((value['seriesData'] as Array<any>).map(SeriesDataToJSON)),
        'selectionRanges': value['selectionRanges'] == null ? undefined : ((value['selectionRanges'] as Array<any>).map(SelectionRangeToJSON)),
    };
}

