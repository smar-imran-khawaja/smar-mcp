/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Duration } from './Duration';
import {
    DurationFromJSON,
    DurationFromJSONTyped,
    DurationToJSON,
    DurationToJSONTyped,
} from './Duration';

/**
 * 
 * @export
 * @interface Predecessor
 */
export interface Predecessor {
    /**
     * The Id of the predecessor row.
     * @type {number}
     * @memberof Predecessor
     */
    rowId?: number;
    /**
     * Type of the predecessor:
     *  * FF (Finish-to-Finish) - finish at the same time the predecessor finishes.
     *  * FS (Finish-to-Start) - start after the predecessor finishes.
     *  * SF (Start-to-Finish) - finish before the predecessor starts.
     *  * SS (Start-to-Start) - start at the same time the predecessor starts.
     * 
     * @type {string}
     * @memberof Predecessor
     */
    type?: PredecessorTypeEnum;
    /**
     * True if this predecessor is in the critical path.
     * @type {boolean}
     * @memberof Predecessor
     */
    readonly inCriticalPath?: boolean;
    /**
     * True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as "#REF") Omitted if false.
     * @type {boolean}
     * @memberof Predecessor
     */
    readonly invalid?: boolean;
    /**
     * 
     * @type {Duration}
     * @memberof Predecessor
     */
    lag?: Duration;
    /**
     * The row number of the predecessor row. Omitted if invalid is true.
     * @type {number}
     * @memberof Predecessor
     */
    readonly rowNumber?: number;
}


/**
 * @export
 */
export const PredecessorTypeEnum = {
    Ff: 'FF',
    Fs: 'FS',
    Sf: 'SF',
    Ss: 'SS'
} as const;
export type PredecessorTypeEnum = typeof PredecessorTypeEnum[keyof typeof PredecessorTypeEnum];


/**
 * Check if a given object implements the Predecessor interface.
 */
export function instanceOfPredecessor(value: object): value is Predecessor {
    return true;
}

export function PredecessorFromJSON(json: any): Predecessor {
    return PredecessorFromJSONTyped(json, false);
}

export function PredecessorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Predecessor {
    if (json == null) {
        return json;
    }
    return {
        
        'rowId': json['rowId'] == null ? undefined : json['rowId'],
        'type': json['type'] == null ? undefined : json['type'],
        'inCriticalPath': json['inCriticalPath'] == null ? undefined : json['inCriticalPath'],
        'invalid': json['invalid'] == null ? undefined : json['invalid'],
        'lag': json['lag'] == null ? undefined : DurationFromJSON(json['lag']),
        'rowNumber': json['rowNumber'] == null ? undefined : json['rowNumber'],
    };
}

export function PredecessorToJSON(json: any): Predecessor {
    return PredecessorToJSONTyped(json, false);
}

export function PredecessorToJSONTyped(value?: Omit<Predecessor, 'inCriticalPath'|'invalid'|'rowNumber'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rowId': value['rowId'],
        'type': value['type'],
        'lag': DurationToJSON(value['lag']),
    };
}

