/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Report } from './Report';
import {
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
    ReportToJSONTyped,
} from './Report';
import type { Folder } from './Folder';
import {
    FolderFromJSON,
    FolderFromJSONTyped,
    FolderToJSON,
    FolderToJSONTyped,
} from './Folder';
import type { Sheet } from './Sheet';
import {
    SheetFromJSON,
    SheetFromJSONTyped,
    SheetToJSON,
    SheetToJSONTyped,
} from './Sheet';
import type { Sight } from './Sight';
import {
    SightFromJSON,
    SightFromJSONTyped,
    SightToJSON,
    SightToJSONTyped,
} from './Sight';
import type { Template } from './Template';
import {
    TemplateFromJSON,
    TemplateFromJSONTyped,
    TemplateToJSON,
    TemplateToJSONTyped,
} from './Template';

/**
 * All objects a user has access to, including dashboards, folders, reports, sheets, and templates.
 * @export
 * @interface Home
 */
export interface Home {
    /**
     * 
     * @type {Array<Folder>}
     * @memberof Home
     */
    folders?: Array<Folder>;
    /**
     * 
     * @type {Array<Report>}
     * @memberof Home
     */
    reports?: Array<Report>;
    /**
     * 
     * @type {Array<Sheet>}
     * @memberof Home
     */
    sheets?: Array<Sheet>;
    /**
     * 
     * @type {Array<Sight>}
     * @memberof Home
     */
    sights?: Array<Sight>;
    /**
     * 
     * @type {Array<Template>}
     * @memberof Home
     */
    templates?: Array<Template>;
}

/**
 * Check if a given object implements the Home interface.
 */
export function instanceOfHome(value: object): value is Home {
    return true;
}

export function HomeFromJSON(json: any): Home {
    return HomeFromJSONTyped(json, false);
}

export function HomeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Home {
    if (json == null) {
        return json;
    }
    return {
        
        'folders': json['folders'] == null ? undefined : ((json['folders'] as Array<any>).map(FolderFromJSON)),
        'reports': json['reports'] == null ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
        'sheets': json['sheets'] == null ? undefined : ((json['sheets'] as Array<any>).map(SheetFromJSON)),
        'sights': json['sights'] == null ? undefined : ((json['sights'] as Array<any>).map(SightFromJSON)),
        'templates': json['templates'] == null ? undefined : ((json['templates'] as Array<any>).map(TemplateFromJSON)),
    };
}

export function HomeToJSON(json: any): Home {
    return HomeToJSONTyped(json, false);
}

export function HomeToJSONTyped(value?: Home | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'folders': value['folders'] == null ? undefined : ((value['folders'] as Array<any>).map(FolderToJSON)),
        'reports': value['reports'] == null ? undefined : ((value['reports'] as Array<any>).map(ReportToJSON)),
        'sheets': value['sheets'] == null ? undefined : ((value['sheets'] as Array<any>).map(SheetToJSON)),
        'sights': value['sights'] == null ? undefined : ((value['sights'] as Array<any>).map(SightToJSON)),
        'templates': value['templates'] == null ? undefined : ((value['templates'] as Array<any>).map(TemplateToJSON)),
    };
}

