/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';
import type { Discussion } from './Discussion';
import {
    DiscussionFromJSON,
    DiscussionFromJSONTyped,
    DiscussionToJSON,
    DiscussionToJSONTyped,
} from './Discussion';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval.
 * @export
 * @interface Proof
 */
export interface Proof {
    /**
     * Proof Id of the proof version.
     * @type {number}
     * @memberof Proof
     */
    id?: number;
    /**
     * Proof Id of the original proof version.
     * @type {number}
     * @memberof Proof
     */
    originalId?: number;
    /**
     * Proof name. This is the same as primary column value. If the primary column value is empty, name is empty.
     * @type {string}
     * @memberof Proof
     */
    name?: string;
    /**
     * File type for the proof version.
     * @type {string}
     * @memberof Proof
     */
    proofType?: ProofProofTypeEnum;
    /**
     * URL to review a proofing request.
     * @type {string}
     * @memberof Proof
     */
    proofRequestUrl?: string;
    /**
     * The version number of the proof.
     * @type {number}
     * @memberof Proof
     */
    version?: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof Proof
     */
    lastUpdatedAt?: Timestamp;
    /**
     * `User` object containing `name` and `email` of the user who last updated the proof.
     * 
     * @type {MiniUser}
     * @memberof Proof
     */
    lastUpdatedBy?: MiniUser;
    /**
     * Indicates whether the proof is completed.
     * @type {boolean}
     * @memberof Proof
     */
    isCompleted?: boolean;
    /**
     * Array of Attachment objects. Only returned if the include query string parameter contains attachments.
     * @type {Array<Attachment>}
     * @memberof Proof
     */
    attachments?: Array<Attachment>;
    /**
     * Array of Discussion objects. Only returned if the include query string parameter contains discussions.
     * @type {Array<Discussion>}
     * @memberof Proof
     */
    discussions?: Array<Discussion>;
}


/**
 * @export
 */
export const ProofProofTypeEnum = {
    Document: 'DOCUMENT',
    Image: 'IMAGE',
    Mixed: 'MIXED',
    None: 'NONE',
    Video: 'VIDEO'
} as const;
export type ProofProofTypeEnum = typeof ProofProofTypeEnum[keyof typeof ProofProofTypeEnum];


/**
 * Check if a given object implements the Proof interface.
 */
export function instanceOfProof(value: object): value is Proof {
    return true;
}

export function ProofFromJSON(json: any): Proof {
    return ProofFromJSONTyped(json, false);
}

export function ProofFromJSONTyped(json: any, ignoreDiscriminator: boolean): Proof {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'originalId': json['originalId'] == null ? undefined : json['originalId'],
        'name': json['name'] == null ? undefined : json['name'],
        'proofType': json['proofType'] == null ? undefined : json['proofType'],
        'proofRequestUrl': json['proofRequestUrl'] == null ? undefined : json['proofRequestUrl'],
        'version': json['version'] == null ? undefined : json['version'],
        'lastUpdatedAt': json['lastUpdatedAt'] == null ? undefined : TimestampFromJSON(json['lastUpdatedAt']),
        'lastUpdatedBy': json['lastUpdatedBy'] == null ? undefined : MiniUserFromJSON(json['lastUpdatedBy']),
        'isCompleted': json['isCompleted'] == null ? undefined : json['isCompleted'],
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'discussions': json['discussions'] == null ? undefined : ((json['discussions'] as Array<any>).map(DiscussionFromJSON)),
    };
}

export function ProofToJSON(json: any): Proof {
    return ProofToJSONTyped(json, false);
}

export function ProofToJSONTyped(value?: Proof | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'originalId': value['originalId'],
        'name': value['name'],
        'proofType': value['proofType'],
        'proofRequestUrl': value['proofRequestUrl'],
        'version': value['version'],
        'lastUpdatedAt': TimestampToJSON(value['lastUpdatedAt']),
        'lastUpdatedBy': MiniUserToJSON(value['lastUpdatedBy']),
        'isCompleted': value['isCompleted'],
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'discussions': value['discussions'] == null ? undefined : ((value['discussions'] as Array<any>).map(DiscussionToJSON)),
    };
}

