/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CallbackEvent } from './CallbackEvent';
import {
    CallbackEventFromJSON,
    CallbackEventFromJSONTyped,
    CallbackEventToJSON,
    CallbackEventToJSONTyped,
} from './CallbackEvent';

/**
 * 
 * @export
 * @interface Callback
 */
export interface Callback {
    /**
     * Id of the object that corresponds to scope.
     * @type {number}
     * @memberof Callback
     */
    readonly scopeObjectId?: number;
    /**
     * Id of the corresponding webhook.
     * @type {number}
     * @memberof Callback
     */
    webhookId?: number;
    /**
     * Array of CallbackEvent objects
     * @type {Array<CallbackEvent>}
     * @memberof Callback
     */
    events?: Array<CallbackEvent>;
    /**
     * New status of the corresponding webhook. Only returned for webhook status change callbacks (null for event callbacks).
     * @type {string}
     * @memberof Callback
     */
    newWebhookStatus?: string;
    /**
     * Random value that is distinct for each callback.
     * @type {string}
     * @memberof Callback
     */
    nonce?: string;
    /**
     * Scope of the webhook. Currently, the only supported value is sheet.
     * @type {string}
     * @memberof Callback
     */
    scope?: CallbackScopeEnum;
    /**
     * Time that the callback was generated.
     * @type {Date}
     * @memberof Callback
     */
    timestamp?: Date;
}


/**
 * @export
 */
export const CallbackScopeEnum = {
    Sheet: 'sheet'
} as const;
export type CallbackScopeEnum = typeof CallbackScopeEnum[keyof typeof CallbackScopeEnum];


/**
 * Check if a given object implements the Callback interface.
 */
export function instanceOfCallback(value: object): value is Callback {
    return true;
}

export function CallbackFromJSON(json: any): Callback {
    return CallbackFromJSONTyped(json, false);
}

export function CallbackFromJSONTyped(json: any, ignoreDiscriminator: boolean): Callback {
    if (json == null) {
        return json;
    }
    return {
        
        'scopeObjectId': json['scopeObjectId'] == null ? undefined : json['scopeObjectId'],
        'webhookId': json['webhookId'] == null ? undefined : json['webhookId'],
        'events': json['events'] == null ? undefined : ((json['events'] as Array<any>).map(CallbackEventFromJSON)),
        'newWebhookStatus': json['newWebhookStatus'] == null ? undefined : json['newWebhookStatus'],
        'nonce': json['nonce'] == null ? undefined : json['nonce'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
    };
}

export function CallbackToJSON(json: any): Callback {
    return CallbackToJSONTyped(json, false);
}

export function CallbackToJSONTyped(value?: Omit<Callback, 'scopeObjectId'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'webhookId': value['webhookId'],
        'events': value['events'] == null ? undefined : ((value['events'] as Array<any>).map(CallbackEventToJSON)),
        'newWebhookStatus': value['newWebhookStatus'],
        'nonce': value['nonce'],
        'scope': value['scope'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
    };
}

