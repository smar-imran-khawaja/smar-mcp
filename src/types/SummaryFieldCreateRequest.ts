/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { PropertiesType } from './PropertiesType';
import {
    PropertiesTypeFromJSON,
    PropertiesTypeFromJSONTyped,
    PropertiesTypeToJSON,
    PropertiesTypeToJSONTyped,
} from './PropertiesType';
import type { ObjectValue } from './ObjectValue';
import {
    ObjectValueFromJSON,
    ObjectValueFromJSONTyped,
    ObjectValueToJSON,
    ObjectValueToJSONTyped,
} from './ObjectValue';
import type { ContactOption } from './ContactOption';
import {
    ContactOptionFromJSON,
    ContactOptionFromJSONTyped,
    ContactOptionToJSON,
    ContactOptionToJSONTyped,
} from './ContactOption';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';
import type { Hyperlink } from './Hyperlink';
import {
    HyperlinkFromJSON,
    HyperlinkFromJSONTyped,
    HyperlinkToJSON,
    HyperlinkToJSONTyped,
} from './Hyperlink';

/**
 * SummaryField object to create.
 * @export
 * @interface SummaryFieldCreateRequest
 */
export interface SummaryFieldCreateRequest {
    /**
     * Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST.
     * @type {Array<ContactOption>}
     * @memberof SummaryFieldCreateRequest
     */
    contactOptions?: Array<ContactOption>;
    /**
     * The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it.
     * @type {string}
     * @memberof SummaryFieldCreateRequest
     */
    format?: string;
    /**
     * The formula for a cell, if set.
     * @type {string}
     * @memberof SummaryFieldCreateRequest
     */
    formula?: string;
    /**
     * 
     * @type {Hyperlink}
     * @memberof SummaryFieldCreateRequest
     */
    hyperlink?: Hyperlink;
    /**
     * 
     * @type {Image}
     * @memberof SummaryFieldCreateRequest
     */
    image?: Image;
    /**
     * Field index or position. This number is zero-based.
     * @type {number}
     * @memberof SummaryFieldCreateRequest
     */
    index?: number;
    /**
     * Indicates whether the field is locked.
     * @type {boolean}
     * @memberof SummaryFieldCreateRequest
     */
    locked?: boolean;
    /**
     * 
     * @type {ObjectValue}
     * @memberof SummaryFieldCreateRequest
     */
    objectValue?: ObjectValue;
    /**
     * When applicable for PICKLIST column type. Array of the options available for the field.
     * @type {Array<string>}
     * @memberof SummaryFieldCreateRequest
     */
    options?: Array<string>;
    /**
     * When applicable for PICKLIST column type.
     * @type {string}
     * @memberof SummaryFieldCreateRequest
     */
    symbol?: string;
    /**
     * Arbitrary name, must be unique within summary.
     * @type {string}
     * @memberof SummaryFieldCreateRequest
     */
    title?: string;
    /**
     * 
     * @type {PropertiesType}
     * @memberof SummaryFieldCreateRequest
     */
    type?: PropertiesType;
    /**
     * Indicates whether summary field values are restricted to the type.
     * @type {boolean}
     * @memberof SummaryFieldCreateRequest
     */
    validation?: boolean;
}



/**
 * Check if a given object implements the SummaryFieldCreateRequest interface.
 */
export function instanceOfSummaryFieldCreateRequest(value: object): value is SummaryFieldCreateRequest {
    return true;
}

export function SummaryFieldCreateRequestFromJSON(json: any): SummaryFieldCreateRequest {
    return SummaryFieldCreateRequestFromJSONTyped(json, false);
}

export function SummaryFieldCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SummaryFieldCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'contactOptions': json['contactOptions'] == null ? undefined : ((json['contactOptions'] as Array<any>).map(ContactOptionFromJSON)),
        'format': json['format'] == null ? undefined : json['format'],
        'formula': json['formula'] == null ? undefined : json['formula'],
        'hyperlink': json['hyperlink'] == null ? undefined : HyperlinkFromJSON(json['hyperlink']),
        'image': json['image'] == null ? undefined : ImageFromJSON(json['image']),
        'index': json['index'] == null ? undefined : json['index'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'objectValue': json['objectValue'] == null ? undefined : ObjectValueFromJSON(json['objectValue']),
        'options': json['options'] == null ? undefined : json['options'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : PropertiesTypeFromJSON(json['type']),
        'validation': json['validation'] == null ? undefined : json['validation'],
    };
}

export function SummaryFieldCreateRequestToJSON(json: any): SummaryFieldCreateRequest {
    return SummaryFieldCreateRequestToJSONTyped(json, false);
}

export function SummaryFieldCreateRequestToJSONTyped(value?: SummaryFieldCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contactOptions': value['contactOptions'] == null ? undefined : ((value['contactOptions'] as Array<any>).map(ContactOptionToJSON)),
        'format': value['format'],
        'formula': value['formula'],
        'hyperlink': HyperlinkToJSON(value['hyperlink']),
        'image': ImageToJSON(value['image']),
        'index': value['index'],
        'locked': value['locked'],
        'objectValue': ObjectValueToJSON(value['objectValue']),
        'options': value['options'],
        'symbol': value['symbol'],
        'title': value['title'],
        'type': PropertiesTypeToJSON(value['type']),
        'validation': value['validation'],
    };
}

