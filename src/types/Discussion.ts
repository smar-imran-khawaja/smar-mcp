/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
    CommentToJSONTyped,
} from './Comment';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * 
 * @export
 * @interface Discussion
 */
export interface Discussion {
    /**
     * 
     * @type {AccessLevel}
     * @memberof Discussion
     */
    accessLevel?: AccessLevel;
    /**
     * Discussion Id.
     * @type {number}
     * @memberof Discussion
     */
    id?: number;
    /**
     * Array of comments in discussion. Only returned if the include query string parameter contains comments.
     * @type {Array<Comment>}
     * @memberof Discussion
     */
    comments?: Array<Comment>;
    /**
     * Array of attachments on discussion comments. Only returned if the include query string parameter contains attachments.
     * @type {Array<Attachment>}
     * @memberof Discussion
     */
    commentAttachments?: Array<Attachment>;
    /**
     * Number of comments in the discussion.
     * @type {number}
     * @memberof Discussion
     */
    commentCount?: number;
    /**
     * `User` object containing `name` and `email` of the user who created the discussion.
     * 
     * @type {MiniUser}
     * @memberof Discussion
     */
    createdBy?: MiniUser;
    /**
     * 
     * @type {Timestamp}
     * @memberof Discussion
     */
    lastCommentedAt?: Timestamp;
    /**
     * `User` object containing `name` and `email` of the user who last commented on the discussion.
     * 
     * @type {MiniUser}
     * @memberof Discussion
     */
    lastCommentedUser?: MiniUser;
    /**
     * The Id of the associated row or sheet.
     * @type {number}
     * @memberof Discussion
     */
    parentId?: number;
    /**
     * Type of parent object.
     * @type {string}
     * @memberof Discussion
     */
    parentType?: DiscussionParentTypeEnum;
    /**
     * Indicates whether the user can modify the discussion.
     * @type {boolean}
     * @memberof Discussion
     */
    readOnly?: boolean;
    /**
     * Title automatically created by duplicating the first 100 characters of top-level comment.
     * @type {string}
     * @memberof Discussion
     */
    readonly title?: string;
}


/**
 * @export
 */
export const DiscussionParentTypeEnum = {
    Row: 'ROW',
    Sheet: 'SHEET'
} as const;
export type DiscussionParentTypeEnum = typeof DiscussionParentTypeEnum[keyof typeof DiscussionParentTypeEnum];


/**
 * Check if a given object implements the Discussion interface.
 */
export function instanceOfDiscussion(value: object): value is Discussion {
    return true;
}

export function DiscussionFromJSON(json: any): Discussion {
    return DiscussionFromJSONTyped(json, false);
}

export function DiscussionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Discussion {
    if (json == null) {
        return json;
    }
    return {
        
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'id': json['id'] == null ? undefined : json['id'],
        'comments': json['comments'] == null ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'commentAttachments': json['commentAttachments'] == null ? undefined : ((json['commentAttachments'] as Array<any>).map(AttachmentFromJSON)),
        'commentCount': json['commentCount'] == null ? undefined : json['commentCount'],
        'createdBy': json['createdBy'] == null ? undefined : MiniUserFromJSON(json['createdBy']),
        'lastCommentedAt': json['lastCommentedAt'] == null ? undefined : TimestampFromJSON(json['lastCommentedAt']),
        'lastCommentedUser': json['lastCommentedUser'] == null ? undefined : MiniUserFromJSON(json['lastCommentedUser']),
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'parentType': json['parentType'] == null ? undefined : json['parentType'],
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
        'title': json['title'] == null ? undefined : json['title'],
    };
}

export function DiscussionToJSON(json: any): Discussion {
    return DiscussionToJSONTyped(json, false);
}

export function DiscussionToJSONTyped(value?: Omit<Discussion, 'title'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'id': value['id'],
        'comments': value['comments'] == null ? undefined : ((value['comments'] as Array<any>).map(CommentToJSON)),
        'commentAttachments': value['commentAttachments'] == null ? undefined : ((value['commentAttachments'] as Array<any>).map(AttachmentToJSON)),
        'commentCount': value['commentCount'],
        'createdBy': MiniUserToJSON(value['createdBy']),
        'lastCommentedAt': TimestampToJSON(value['lastCommentedAt']),
        'lastCommentedUser': MiniUserToJSON(value['lastCommentedUser']),
        'parentId': value['parentId'],
        'parentType': value['parentType'],
        'readOnly': value['readOnly'],
    };
}

