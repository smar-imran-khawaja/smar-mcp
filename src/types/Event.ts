/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EventAdditionalDetails } from './EventAdditionalDetails';
import {
    EventAdditionalDetailsFromJSON,
    EventAdditionalDetailsFromJSONTyped,
    EventAdditionalDetailsToJSON,
    EventAdditionalDetailsToJSONTyped,
} from './EventAdditionalDetails';

/**
 * An Event object for event reporting.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * Unique event identifier.
     * @type {string}
     * @memberof Event
     */
    eventId?: string;
    /**
     * The Smartsheet resource impacted by the event, such as, SHEET or WORKSPACE.
     * @type {string}
     * @memberof Event
     */
    objectType?: EventObjectTypeEnum;
    /**
     * The action applied to the specified object, such as CREATE or DELETE.
     * @type {string}
     * @memberof Event
     */
    action?: string;
    /**
     * The identifier of the object impacted by the event.
     * @type {string}
     * @memberof Event
     */
    objectId?: string;
    /**
     * Date and time of the event. Defaults to ISO-8601 format. See dates and times for more information.
     * @type {Date}
     * @memberof Event
     */
    eventTimestamp?: Date;
    /**
     * User assumed as the one who initiated the event. Usually the userId property and the requestUserId property (below) have the same value. However, if the request is an API call with Assume-User header then the userId property identifies the user whose email matches the value in the Assume-User header.
     * @type {number}
     * @memberof Event
     */
    userId?: number;
    /**
     * User whose authentication credential is embedded in the request that initiated the event. For example, if the request is an API call with an access token then requestUserId identifies the user whose data can be accessed via the access token (i.e., the user who authorized the creation of the access token). On the other hand, if the request comes from a UI session, then requestUserId identifies the user logged-in to the UI.
     * @type {number}
     * @memberof Event
     */
    requestUserId?: number;
    /**
     * Name of the access token embedded in the request. This property is omitted if there's no access token in the request (i.e., it isn't an API call) or if the access token wasn't given a name when created (only access tokens generated via the Smartsheet desktop UI can be given a name at creation time).
     * @type {string}
     * @memberof Event
     */
    accessTokenName?: string;
    /**
     * Identifies the client or user agent used to initiate the action.
     * @type {string}
     * @memberof Event
     */
    source?: EventSourceEnum;
    /**
     * 
     * @type {EventAdditionalDetails}
     * @memberof Event
     */
    additionalDetails?: EventAdditionalDetails;
}


/**
 * @export
 */
export const EventObjectTypeEnum = {
    AccessToken: 'ACCESS_TOKEN',
    Account: 'ACCOUNT',
    Attachment: 'ATTACHMENT',
    Dashboard: 'DASHBOARD',
    Discussion: 'DISCUSSION',
    Folder: 'FOLDER',
    Form: 'FORM',
    Group: 'GROUP',
    Report: 'REPORT',
    Sheet: 'SHEET',
    UpdateRequest: 'UPDATE_REQUEST',
    User: 'USER',
    Workspace: 'WORKSPACE'
} as const;
export type EventObjectTypeEnum = typeof EventObjectTypeEnum[keyof typeof EventObjectTypeEnum];

/**
 * @export
 */
export const EventSourceEnum = {
    WebApp: 'WEB_APP',
    MobileIos: 'MOBILE_IOS',
    MobileAndroid: 'MOBILE_ANDROID',
    ApiUndefinedApp: 'API_UNDEFINED_APP',
    ApiIntegratedApp: 'API_INTEGRATED_APP',
    ApiOdbcDriver: 'API_ODBC_DRIVER'
} as const;
export type EventSourceEnum = typeof EventSourceEnum[keyof typeof EventSourceEnum];


/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['eventId'] == null ? undefined : json['eventId'],
        'objectType': json['objectType'] == null ? undefined : json['objectType'],
        'action': json['action'] == null ? undefined : json['action'],
        'objectId': json['objectId'] == null ? undefined : json['objectId'],
        'eventTimestamp': json['eventTimestamp'] == null ? undefined : (new Date(json['eventTimestamp'])),
        'userId': json['userId'] == null ? undefined : json['userId'],
        'requestUserId': json['requestUserId'] == null ? undefined : json['requestUserId'],
        'accessTokenName': json['accessTokenName'] == null ? undefined : json['accessTokenName'],
        'source': json['source'] == null ? undefined : json['source'],
        'additionalDetails': json['additionalDetails'] == null ? undefined : EventAdditionalDetailsFromJSON(json['additionalDetails']),
    };
}

export function EventToJSON(json: any): Event {
    return EventToJSONTyped(json, false);
}

export function EventToJSONTyped(value?: Event | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'eventId': value['eventId'],
        'objectType': value['objectType'],
        'action': value['action'],
        'objectId': value['objectId'],
        'eventTimestamp': value['eventTimestamp'] == null ? undefined : ((value['eventTimestamp']).toISOString()),
        'userId': value['userId'],
        'requestUserId': value['requestUserId'],
        'accessTokenName': value['accessTokenName'],
        'source': value['source'],
        'additionalDetails': EventAdditionalDetailsToJSON(value['additionalDetails']),
    };
}

