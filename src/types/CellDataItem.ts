/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SummaryField } from './SummaryField';
import {
    SummaryFieldFromJSON,
    SummaryFieldFromJSONTyped,
    SummaryFieldToJSON,
    SummaryFieldToJSONTyped,
} from './SummaryField';
import type { CellDataItemObjectValue } from './CellDataItemObjectValue';
import {
    CellDataItemObjectValueFromJSON,
    CellDataItemObjectValueFromJSONTyped,
    CellDataItemObjectValueToJSON,
    CellDataItemObjectValueToJSONTyped,
} from './CellDataItemObjectValue';
import type { Cell } from './Cell';
import {
    CellFromJSON,
    CellFromJSONTyped,
    CellToJSON,
    CellToJSONTyped,
} from './Cell';
import type { DashboardFont } from './DashboardFont';
import {
    DashboardFontFromJSON,
    DashboardFontFromJSONTyped,
    DashboardFontToJSON,
    DashboardFontToJSONTyped,
} from './DashboardFont';

/**
 * 
 * @export
 * @interface CellDataItem
 */
export interface CellDataItem {
    /**
     * Column Id for each item.
     * @type {number}
     * @memberof CellDataItem
     */
    columnId?: number;
    /**
     * Row Id for each item.
     * @type {number}
     * @memberof CellDataItem
     */
    rowId?: number;
    /**
     * Sheet Id for each item.
     * @type {number}
     * @memberof CellDataItem
     */
    sheetId?: number;
    /**
     * 
     * @type {CellDataItemObjectValue}
     * @memberof CellDataItem
     */
    objectValue?: CellDataItemObjectValue;
    /**
     * 
     * @type {Cell}
     * @memberof CellDataItem
     */
    cell?: Cell;
    /**
     * 
     * @type {string}
     * @memberof CellDataItem
     */
    dataSource?: CellDataItemDataSourceEnum;
    /**
     * Specifies if valueFormat is inherited from the underlying cell value
     * @type {boolean}
     * @memberof CellDataItem
     */
    inheritCellValue?: boolean;
    /**
     * Label for the data point. This is either the column name or a user-provided string.
     * @type {string}
     * @memberof CellDataItem
     */
    label?: string;
    /**
     * Format description for label.
     * @type {string}
     * @memberof CellDataItem
     */
    labelFormat?: string;
    /**
     * 
     * @type {DashboardFont}
     * @memberof CellDataItem
     */
    labelFont?: DashboardFont;
    /**
     * The display order for the CellDataItem.
     * @type {number}
     * @memberof CellDataItem
     */
    order?: number;
    /**
     * 
     * @type {SummaryField}
     * @memberof CellDataItem
     */
    profileField?: SummaryField;
    /**
     * Format description for value.
     * @type {string}
     * @memberof CellDataItem
     */
    valueFormat?: string;
    /**
     * 
     * @type {DashboardFont}
     * @memberof CellDataItem
     */
    valueFont?: DashboardFont;
}


/**
 * @export
 */
export const CellDataItemDataSourceEnum = {
    Cell: 'CELL',
    SummaryField: 'SUMMARY_FIELD'
} as const;
export type CellDataItemDataSourceEnum = typeof CellDataItemDataSourceEnum[keyof typeof CellDataItemDataSourceEnum];


/**
 * Check if a given object implements the CellDataItem interface.
 */
export function instanceOfCellDataItem(value: object): value is CellDataItem {
    return true;
}

export function CellDataItemFromJSON(json: any): CellDataItem {
    return CellDataItemFromJSONTyped(json, false);
}

export function CellDataItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): CellDataItem {
    if (json == null) {
        return json;
    }
    return {
        
        'columnId': json['columnId'] == null ? undefined : json['columnId'],
        'rowId': json['rowId'] == null ? undefined : json['rowId'],
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'objectValue': json['objectValue'] == null ? undefined : CellDataItemObjectValueFromJSON(json['objectValue']),
        'cell': json['cell'] == null ? undefined : CellFromJSON(json['cell']),
        'dataSource': json['dataSource'] == null ? undefined : json['dataSource'],
        'inheritCellValue': json['inheritCellValue'] == null ? undefined : json['inheritCellValue'],
        'label': json['label'] == null ? undefined : json['label'],
        'labelFormat': json['labelFormat'] == null ? undefined : json['labelFormat'],
        'labelFont': json['labelFont'] == null ? undefined : DashboardFontFromJSON(json['labelFont']),
        'order': json['order'] == null ? undefined : json['order'],
        'profileField': json['profileField'] == null ? undefined : SummaryFieldFromJSON(json['profileField']),
        'valueFormat': json['valueFormat'] == null ? undefined : json['valueFormat'],
        'valueFont': json['valueFont'] == null ? undefined : DashboardFontFromJSON(json['valueFont']),
    };
}

export function CellDataItemToJSON(json: any): CellDataItem {
    return CellDataItemToJSONTyped(json, false);
}

export function CellDataItemToJSONTyped(value?: CellDataItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'columnId': value['columnId'],
        'rowId': value['rowId'],
        'sheetId': value['sheetId'],
        'objectValue': CellDataItemObjectValueToJSON(value['objectValue']),
        'cell': CellToJSON(value['cell']),
        'dataSource': value['dataSource'],
        'inheritCellValue': value['inheritCellValue'],
        'label': value['label'],
        'labelFormat': value['labelFormat'],
        'labelFont': DashboardFontToJSON(value['labelFont']),
        'order': value['order'],
        'profileField': SummaryFieldToJSON(value['profileField']),
        'valueFormat': value['valueFormat'],
        'valueFont': DashboardFontToJSON(value['valueFont']),
    };
}

