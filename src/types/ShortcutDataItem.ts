/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { DashboardFont } from './DashboardFont';
import {
    DashboardFontFromJSON,
    DashboardFontFromJSONTyped,
    DashboardFontToJSON,
    DashboardFontToJSONTyped,
} from './DashboardFont';
import type { Hyperlink } from './Hyperlink';
import {
    HyperlinkFromJSON,
    HyperlinkFromJSONTyped,
    HyperlinkToJSON,
    HyperlinkToJSONTyped,
} from './Hyperlink';

/**
 * 
 * @export
 * @interface ShortcutDataItem
 */
export interface ShortcutDataItem {
    /**
     * 
     * @type {string}
     * @memberof ShortcutDataItem
     */
    attachmentType?: ShortcutDataItemAttachmentTypeEnum;
    /**
     * 
     * @type {Hyperlink}
     * @memberof ShortcutDataItem
     */
    hyperlink?: Hyperlink;
    /**
     * Label for the data point.
     * @type {string}
     * @memberof ShortcutDataItem
     */
    label?: string;
    /**
     * Format description of label.
     * @type {string}
     * @memberof ShortcutDataItem
     */
    labelFormat?: string;
    /**
     * 
     * @type {DashboardFont}
     * @memberof ShortcutDataItem
     */
    labelFont?: DashboardFont;
    /**
     * 
     * @type {string}
     * @memberof ShortcutDataItem
     */
    mimeType?: string;
    /**
     * The display order for the ShortcutWidgetItem object.
     * @type {number}
     * @memberof ShortcutDataItem
     */
    order?: number;
}


/**
 * @export
 */
export const ShortcutDataItemAttachmentTypeEnum = {
    BoxCom: 'BOX_COM',
    Dropbox: 'DROPBOX',
    Egnyte: 'EGNYTE',
    Evernote: 'EVERNOTE',
    File: 'FILE',
    GoogleDrive: 'GOOGLE_DRIVE',
    Link: 'LINK',
    Onedrive: 'ONEDRIVE',
    Smartsheet: 'SMARTSHEET'
} as const;
export type ShortcutDataItemAttachmentTypeEnum = typeof ShortcutDataItemAttachmentTypeEnum[keyof typeof ShortcutDataItemAttachmentTypeEnum];


/**
 * Check if a given object implements the ShortcutDataItem interface.
 */
export function instanceOfShortcutDataItem(value: object): value is ShortcutDataItem {
    return true;
}

export function ShortcutDataItemFromJSON(json: any): ShortcutDataItem {
    return ShortcutDataItemFromJSONTyped(json, false);
}

export function ShortcutDataItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShortcutDataItem {
    if (json == null) {
        return json;
    }
    return {
        
        'attachmentType': json['attachmentType'] == null ? undefined : json['attachmentType'],
        'hyperlink': json['hyperlink'] == null ? undefined : HyperlinkFromJSON(json['hyperlink']),
        'label': json['label'] == null ? undefined : json['label'],
        'labelFormat': json['labelFormat'] == null ? undefined : json['labelFormat'],
        'labelFont': json['labelFont'] == null ? undefined : DashboardFontFromJSON(json['labelFont']),
        'mimeType': json['mimeType'] == null ? undefined : json['mimeType'],
        'order': json['order'] == null ? undefined : json['order'],
    };
}

export function ShortcutDataItemToJSON(json: any): ShortcutDataItem {
    return ShortcutDataItemToJSONTyped(json, false);
}

export function ShortcutDataItemToJSONTyped(value?: ShortcutDataItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attachmentType': value['attachmentType'],
        'hyperlink': HyperlinkToJSON(value['hyperlink']),
        'label': value['label'],
        'labelFormat': value['labelFormat'],
        'labelFont': DashboardFontToJSON(value['labelFont']),
        'mimeType': value['mimeType'],
        'order': value['order'],
    };
}

