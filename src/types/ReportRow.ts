/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Column } from './Column';
import {
    ColumnFromJSON,
    ColumnFromJSONTyped,
    ColumnToJSON,
    ColumnToJSONTyped,
} from './Column';
import type { Proof } from './Proof';
import {
    ProofFromJSON,
    ProofFromJSONTyped,
    ProofToJSON,
    ProofToJSONTyped,
} from './Proof';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';
import type { Cell } from './Cell';
import {
    CellFromJSON,
    CellFromJSONTyped,
    CellToJSON,
    CellToJSONTyped,
} from './Cell';
import type { Discussion } from './Discussion';
import {
    DiscussionFromJSON,
    DiscussionFromJSONTyped,
    DiscussionToJSON,
    DiscussionToJSONTyped,
} from './Discussion';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * 
 * @export
 * @interface ReportRow
 */
export interface ReportRow {
    /**
     * The Id of the sheet from which the row originates.
     * @type {number}
     * @memberof ReportRow
     */
    sheetId?: number;
    /**
     * Row Id.
     * @type {number}
     * @memberof ReportRow
     */
    id?: number;
    /**
     * Sibling Id.
     * @type {number}
     * @memberof ReportRow
     */
    siblingId?: number;
    /**
     * 
     * @type {AccessLevel}
     * @memberof ReportRow
     */
    accessLevel?: AccessLevel;
    /**
     * Attachments on row. Only returned if the include query string parameter contains attachments.
     * @type {Array<Attachment>}
     * @memberof ReportRow
     */
    attachments?: Array<Attachment>;
    /**
     * Cells belonging to the row.
     * @type {Array<Cell>}
     * @memberof ReportRow
     */
    cells?: Array<Cell>;
    /**
     * Columns of row. Only returned if the include query string parameter contains columns.
     * @type {Array<Column>}
     * @memberof ReportRow
     */
    columns?: Array<Column>;
    /**
     * Describes this row's conditional format. Only returned if the include query string parameter contains format and this row has a conditional format applied.
     * @type {string}
     * @memberof ReportRow
     */
    conditionalFormat?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof ReportRow
     */
    createdAt?: Timestamp;
    /**
     * User object containing name and email of the creator of this row.
     * @type {MiniUser}
     * @memberof ReportRow
     */
    createdBy?: MiniUser;
    /**
     * Discussions on the row. Only returned if the include query string parameter contains discussions.
     * @type {Array<Discussion>}
     * @memberof ReportRow
     */
    discussions?: Array<Discussion>;
    /**
     * 
     * @type {Proof}
     * @memberof ReportRow
     */
    proof?: Proof;
    /**
     * Indicates whether the row is expanded or collapsed.
     * @type {boolean}
     * @memberof ReportRow
     */
    expanded?: boolean;
    /**
     * Indicates if the row is filtered out by a column filter. Only returned if the include query string parameter contains filters.
     * @type {boolean}
     * @memberof ReportRow
     */
    filteredOut?: boolean;
    /**
     * Format descriptor. Only returned if the include query string parameter contains format and this row has a non-default format applied.
     * @type {string}
     * @memberof ReportRow
     */
    format?: string;
    /**
     * Only returned, with a value of true, if the sheet is a project sheet with dependencies enabled and this row is in the critical path.
     * @type {boolean}
     * @memberof ReportRow
     */
    inCriticalPath?: boolean;
    /**
     * Indicates whether the row is locked.
     * @type {boolean}
     * @memberof ReportRow
     */
    locked?: boolean;
    /**
     * Indicates whether the row is locked for the requesting user.
     * @type {boolean}
     * @memberof ReportRow
     */
    lockedForUser?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof ReportRow
     */
    modifiedAt?: Timestamp;
    /**
     * User object containing name and email of the last person to modify this row.
     * @type {MiniUser}
     * @memberof ReportRow
     */
    modifiedBy?: MiniUser;
    /**
     * URL that represents a direct link to the row in Smartsheet. Only returned if the include query string parameter contains rowPermalink.
     * @type {string}
     * @memberof ReportRow
     */
    permaLink?: string;
    /**
     * Row number within the sheet.
     * @type {number}
     * @memberof ReportRow
     */
    rowNumber?: number;
    /**
     * Sheet version number that is incremented every time a sheet is modified.
     * @type {number}
     * @memberof ReportRow
     */
    version?: number;
}



/**
 * Check if a given object implements the ReportRow interface.
 */
export function instanceOfReportRow(value: object): value is ReportRow {
    return true;
}

export function ReportRowFromJSON(json: any): ReportRow {
    return ReportRowFromJSONTyped(json, false);
}

export function ReportRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportRow {
    if (json == null) {
        return json;
    }
    return {
        
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'id': json['id'] == null ? undefined : json['id'],
        'siblingId': json['siblingId'] == null ? undefined : json['siblingId'],
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'cells': json['cells'] == null ? undefined : ((json['cells'] as Array<any>).map(CellFromJSON)),
        'columns': json['columns'] == null ? undefined : ((json['columns'] as Array<any>).map(ColumnFromJSON)),
        'conditionalFormat': json['conditionalFormat'] == null ? undefined : json['conditionalFormat'],
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'createdBy': json['createdBy'] == null ? undefined : MiniUserFromJSON(json['createdBy']),
        'discussions': json['discussions'] == null ? undefined : ((json['discussions'] as Array<any>).map(DiscussionFromJSON)),
        'proof': json['proof'] == null ? undefined : ProofFromJSON(json['proof']),
        'expanded': json['expanded'] == null ? undefined : json['expanded'],
        'filteredOut': json['filteredOut'] == null ? undefined : json['filteredOut'],
        'format': json['format'] == null ? undefined : json['format'],
        'inCriticalPath': json['inCriticalPath'] == null ? undefined : json['inCriticalPath'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'lockedForUser': json['lockedForUser'] == null ? undefined : json['lockedForUser'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'modifiedBy': json['modifiedBy'] == null ? undefined : MiniUserFromJSON(json['modifiedBy']),
        'permaLink': json['permaLink'] == null ? undefined : json['permaLink'],
        'rowNumber': json['rowNumber'] == null ? undefined : json['rowNumber'],
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function ReportRowToJSON(json: any): ReportRow {
    return ReportRowToJSONTyped(json, false);
}

export function ReportRowToJSONTyped(value?: ReportRow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sheetId': value['sheetId'],
        'id': value['id'],
        'siblingId': value['siblingId'],
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'cells': value['cells'] == null ? undefined : ((value['cells'] as Array<any>).map(CellToJSON)),
        'columns': value['columns'] == null ? undefined : ((value['columns'] as Array<any>).map(ColumnToJSON)),
        'conditionalFormat': value['conditionalFormat'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'createdBy': MiniUserToJSON(value['createdBy']),
        'discussions': value['discussions'] == null ? undefined : ((value['discussions'] as Array<any>).map(DiscussionToJSON)),
        'proof': ProofToJSON(value['proof']),
        'expanded': value['expanded'],
        'filteredOut': value['filteredOut'],
        'format': value['format'],
        'inCriticalPath': value['inCriticalPath'],
        'locked': value['locked'],
        'lockedForUser': value['lockedForUser'],
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'modifiedBy': MiniUserToJSON(value['modifiedBy']),
        'permaLink': value['permaLink'],
        'rowNumber': value['rowNumber'],
        'version': value['version'],
    };
}

