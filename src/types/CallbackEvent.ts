/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface CallbackEvent
 */
export interface CallbackEvent {
    /**
     * Id of the object that corresponds to objectType. Omitted if objectType is cell.
     * @type {number}
     * @memberof CallbackEvent
     */
    id?: number;
    /**
     * Only present if objectType is cell. The Id of the column where the cell is located.
     * @type {number}
     * @memberof CallbackEvent
     */
    columnId?: number | null;
    /**
     * Only present if objectType is cell. The Id of the row where the cell is located.
     * @type {number}
     * @memberof CallbackEvent
     */
    rowId?: number | null;
    /**
     * The user Id of the person who caused this event.
     * @type {number}
     * @memberof CallbackEvent
     */
    userId?: number;
    /**
     * Type of object for which event occurred.
     * @type {string}
     * @memberof CallbackEvent
     */
    objectType?: CallbackEventObjectTypeEnum;
    /**
     * A comma-delimited list of values that uniquely identify the agents responsible for making the changes that caused the callback to occur. Only present if the change agent included the Smartsheet-Change-Agent header in the API request that changed data in Smartsheet. For more information, see [Preventing Infinite Loops](/api/smartsheet/openapi/webhooks).
     * @type {string}
     * @memberof CallbackEvent
     */
    changeAgent?: string;
    /**
     * Type of Event that occurred.
     * @type {string}
     * @memberof CallbackEvent
     */
    eventType?: CallbackEventEventTypeEnum;
    /**
     * Time that this event occurred. A callback may contain events with different timestamps, as multiple separate events may be aggregated into a single callback request.
     * @type {Date}
     * @memberof CallbackEvent
     */
    timestamp?: Date;
}


/**
 * @export
 */
export const CallbackEventObjectTypeEnum = {
    Attachment: 'attachment',
    Cell: 'cell',
    Column: 'column',
    Comment: 'comment',
    Discussion: 'discussion',
    Row: 'row',
    Sheet: 'sheet'
} as const;
export type CallbackEventObjectTypeEnum = typeof CallbackEventObjectTypeEnum[keyof typeof CallbackEventObjectTypeEnum];

/**
 * @export
 */
export const CallbackEventEventTypeEnum = {
    Created: 'created',
    Deleted: 'deleted',
    Updated: 'updated'
} as const;
export type CallbackEventEventTypeEnum = typeof CallbackEventEventTypeEnum[keyof typeof CallbackEventEventTypeEnum];


/**
 * Check if a given object implements the CallbackEvent interface.
 */
export function instanceOfCallbackEvent(value: object): value is CallbackEvent {
    return true;
}

export function CallbackEventFromJSON(json: any): CallbackEvent {
    return CallbackEventFromJSONTyped(json, false);
}

export function CallbackEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallbackEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'columnId': json['columnId'] == null ? undefined : json['columnId'],
        'rowId': json['rowId'] == null ? undefined : json['rowId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'objectType': json['objectType'] == null ? undefined : json['objectType'],
        'changeAgent': json['changeAgent'] == null ? undefined : json['changeAgent'],
        'eventType': json['eventType'] == null ? undefined : json['eventType'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
    };
}

export function CallbackEventToJSON(json: any): CallbackEvent {
    return CallbackEventToJSONTyped(json, false);
}

export function CallbackEventToJSONTyped(value?: CallbackEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'columnId': value['columnId'],
        'rowId': value['rowId'],
        'userId': value['userId'],
        'objectType': value['objectType'],
        'changeAgent': value['changeAgent'],
        'eventType': value['eventType'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
    };
}

