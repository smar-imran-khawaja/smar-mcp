/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Recipient } from './Recipient';
import {
    RecipientFromJSON,
    RecipientFromJSONTyped,
    RecipientToJSON,
    RecipientToJSONTyped,
} from './Recipient';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { MiniUser } from './MiniUser';
import {
    MiniUserFromJSON,
    MiniUserFromJSONTyped,
    MiniUserToJSON,
    MiniUserToJSONTyped,
} from './MiniUser';

/**
 * 
 * @export
 * @interface SentUpdateRequest
 */
export interface SentUpdateRequest {
    /**
     * The Id of the sent update request.
     * @type {number}
     * @memberof SentUpdateRequest
     */
    id?: number;
    /**
     * The Ids of columns included in the request.
     * @type {Array<number>}
     * @memberof SentUpdateRequest
     */
    columnIds?: Array<number>;
    /**
     * The Ids of rows where an update is requested.
     * @type {Array<number>}
     * @memberof SentUpdateRequest
     */
    rowIds?: Array<number>;
    /**
     * The Id of the originating update request.
     * @type {number}
     * @memberof SentUpdateRequest
     */
    updateRequestId?: number;
    /**
     * Indicates whether the attachments were included in the email.
     * @type {boolean}
     * @memberof SentUpdateRequest
     */
    includeAttachments?: boolean;
    /**
     * Indicates whether the discussions were included in the email.
     * @type {boolean}
     * @memberof SentUpdateRequest
     */
    includeDiscussions?: boolean;
    /**
     * The message of the email. Max 10000 characters.
     * @type {string}
     * @memberof SentUpdateRequest
     */
    message?: string;
    /**
     * The date and time for when the sent update request was sent to the recipient.
     * @type {Timestamp}
     * @memberof SentUpdateRequest
     */
    sentAt?: Timestamp;
    /**
     * `User` object containing `name` and `email` of the sender.
     * 
     * @type {MiniUser}
     * @memberof SentUpdateRequest
     */
    sentBy?: MiniUser;
    /**
     * Recipient object.
     * @type {Recipient}
     * @memberof SentUpdateRequest
     */
    sentTo?: Recipient;
    /**
     * The status of the sent update request.
     * @type {string}
     * @memberof SentUpdateRequest
     */
    status?: SentUpdateRequestStatusEnum;
    /**
     * The subject of the email.
     * @type {string}
     * @memberof SentUpdateRequest
     */
    subject?: string;
}


/**
 * @export
 */
export const SentUpdateRequestStatusEnum = {
    Canceled: 'CANCELED',
    Complete: 'COMPLETE',
    Pending: 'PENDING'
} as const;
export type SentUpdateRequestStatusEnum = typeof SentUpdateRequestStatusEnum[keyof typeof SentUpdateRequestStatusEnum];


/**
 * Check if a given object implements the SentUpdateRequest interface.
 */
export function instanceOfSentUpdateRequest(value: object): value is SentUpdateRequest {
    return true;
}

export function SentUpdateRequestFromJSON(json: any): SentUpdateRequest {
    return SentUpdateRequestFromJSONTyped(json, false);
}

export function SentUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SentUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'columnIds': json['columnIds'] == null ? undefined : json['columnIds'],
        'rowIds': json['rowIds'] == null ? undefined : json['rowIds'],
        'updateRequestId': json['updateRequestId'] == null ? undefined : json['updateRequestId'],
        'includeAttachments': json['includeAttachments'] == null ? undefined : json['includeAttachments'],
        'includeDiscussions': json['includeDiscussions'] == null ? undefined : json['includeDiscussions'],
        'message': json['message'] == null ? undefined : json['message'],
        'sentAt': json['sentAt'] == null ? undefined : TimestampFromJSON(json['sentAt']),
        'sentBy': json['sentBy'] == null ? undefined : MiniUserFromJSON(json['sentBy']),
        'sentTo': json['sentTo'] == null ? undefined : RecipientFromJSON(json['sentTo']),
        'status': json['status'] == null ? undefined : json['status'],
        'subject': json['subject'] == null ? undefined : json['subject'],
    };
}

export function SentUpdateRequestToJSON(json: any): SentUpdateRequest {
    return SentUpdateRequestToJSONTyped(json, false);
}

export function SentUpdateRequestToJSONTyped(value?: SentUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'columnIds': value['columnIds'],
        'rowIds': value['rowIds'],
        'updateRequestId': value['updateRequestId'],
        'includeAttachments': value['includeAttachments'],
        'includeDiscussions': value['includeDiscussions'],
        'message': value['message'],
        'sentAt': TimestampToJSON(value['sentAt']),
        'sentBy': MiniUserToJSON(value['sentBy']),
        'sentTo': RecipientToJSON(value['sentTo']),
        'status': value['status'],
        'subject': value['subject'],
    };
}

