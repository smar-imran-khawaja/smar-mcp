/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ObjectValue } from './ObjectValue';
import {
    ObjectValueFromJSON,
    ObjectValueFromJSONTyped,
    ObjectValueToJSON,
    ObjectValueToJSONTyped,
} from './ObjectValue';
import type { CellLink } from './CellLink';
import {
    CellLinkFromJSON,
    CellLinkFromJSONTyped,
    CellLinkToJSON,
    CellLinkToJSONTyped,
} from './CellLink';
import type { CellValue } from './CellValue';
import {
    CellValueFromJSON,
    CellValueFromJSONTyped,
    CellValueToJSON,
    CellValueToJSONTyped,
} from './CellValue';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';
import type { Hyperlink } from './Hyperlink';
import {
    HyperlinkFromJSON,
    HyperlinkFromJSONTyped,
    HyperlinkToJSON,
    HyperlinkToJSONTyped,
} from './Hyperlink';

/**
 * 
 * @export
 * @interface ReportCell
 */
export interface ReportCell {
    /**
     * This property refers to the cell's parent column in the report, while the columnId property refers to the cell's parent column in its originating source sheet.
     * @type {number}
     * @memberof ReportCell
     */
    virtualColumnId?: number;
    /**
     * The Id of the column that the cell is located in.
     * @type {number}
     * @memberof ReportCell
     */
    columnId?: number;
    /**
     * Only returned if the include query string parameter contains **columnType**.
     * @type {string}
     * @memberof ReportCell
     */
    columnType?: string;
    /**
     * The format descriptor describing this cell's conditional format. Only returned if the include query string parameter contains **format** and this cell has a conditional format applied.
     * @type {string}
     * @memberof ReportCell
     */
    conditionalFormat?: string;
    /**
     * Visual representation of cell contents, as presented to the user in the UI.
     * @type {string}
     * @memberof ReportCell
     */
    displayValue?: string;
    /**
     * The format descriptor. Only returned if the include query string parameter contains **format** and this cell has a non-default format applied.
     * @type {string}
     * @memberof ReportCell
     */
    format?: string;
    /**
     * The formula for a cell, if set, for instance **=COUNTM([Assigned To]3)**. Note that calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as **cell.value = "#CIRCULAR REFERENCE"**.
     * @type {string}
     * @memberof ReportCell
     */
    formula?: string;
    /**
     * 
     * @type {Hyperlink}
     * @memberof ReportCell
     */
    hyperlink?: Hyperlink;
    /**
     * 
     * @type {Image}
     * @memberof ReportCell
     */
    image?: Image;
    /**
     * 
     * @type {CellLink}
     * @memberof ReportCell
     */
    linkInFromCell?: CellLink;
    /**
     * 
     * @type {Array<CellLink>}
     * @memberof ReportCell
     */
    linksOutToCells?: Array<CellLink>;
    /**
     * 
     * @type {ObjectValue}
     * @memberof ReportCell
     */
    objectValue?: ObjectValue;
    /**
     * (Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for POST or PUT actions that update rows.
     * @type {boolean}
     * @memberof ReportCell
     */
    overrideValidation?: boolean;
    /**
     * Set to **false** to enable lenient parsing. Defaults to **true**. You can specify this attribute in a request, but it is never present in a response.
     * @type {boolean}
     * @memberof ReportCell
     */
    strict?: boolean;
    /**
     * 
     * @type {CellValue}
     * @memberof ReportCell
     */
    value?: CellValue;
}

/**
 * Check if a given object implements the ReportCell interface.
 */
export function instanceOfReportCell(value: object): value is ReportCell {
    return true;
}

export function ReportCellFromJSON(json: any): ReportCell {
    return ReportCellFromJSONTyped(json, false);
}

export function ReportCellFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportCell {
    if (json == null) {
        return json;
    }
    return {
        
        'virtualColumnId': json['virtualColumnId'] == null ? undefined : json['virtualColumnId'],
        'columnId': json['columnId'] == null ? undefined : json['columnId'],
        'columnType': json['columnType'] == null ? undefined : json['columnType'],
        'conditionalFormat': json['conditionalFormat'] == null ? undefined : json['conditionalFormat'],
        'displayValue': json['displayValue'] == null ? undefined : json['displayValue'],
        'format': json['format'] == null ? undefined : json['format'],
        'formula': json['formula'] == null ? undefined : json['formula'],
        'hyperlink': json['hyperlink'] == null ? undefined : HyperlinkFromJSON(json['hyperlink']),
        'image': json['image'] == null ? undefined : ImageFromJSON(json['image']),
        'linkInFromCell': json['linkInFromCell'] == null ? undefined : CellLinkFromJSON(json['linkInFromCell']),
        'linksOutToCells': json['linksOutToCells'] == null ? undefined : ((json['linksOutToCells'] as Array<any>).map(CellLinkFromJSON)),
        'objectValue': json['objectValue'] == null ? undefined : ObjectValueFromJSON(json['objectValue']),
        'overrideValidation': json['overrideValidation'] == null ? undefined : json['overrideValidation'],
        'strict': json['strict'] == null ? undefined : json['strict'],
        'value': json['value'] == null ? undefined : CellValueFromJSON(json['value']),
    };
}

export function ReportCellToJSON(json: any): ReportCell {
    return ReportCellToJSONTyped(json, false);
}

export function ReportCellToJSONTyped(value?: ReportCell | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'virtualColumnId': value['virtualColumnId'],
        'columnId': value['columnId'],
        'columnType': value['columnType'],
        'conditionalFormat': value['conditionalFormat'],
        'displayValue': value['displayValue'],
        'format': value['format'],
        'formula': value['formula'],
        'hyperlink': HyperlinkToJSON(value['hyperlink']),
        'image': ImageToJSON(value['image']),
        'linkInFromCell': CellLinkToJSON(value['linkInFromCell']),
        'linksOutToCells': value['linksOutToCells'] == null ? undefined : ((value['linksOutToCells'] as Array<any>).map(CellLinkToJSON)),
        'objectValue': ObjectValueToJSON(value['objectValue']),
        'overrideValidation': value['overrideValidation'],
        'strict': value['strict'],
        'value': CellValueToJSON(value['value']),
    };
}

