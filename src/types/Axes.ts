/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ChartColumnInfo } from './ChartColumnInfo';
import {
    ChartColumnInfoFromJSON,
    ChartColumnInfoFromJSONTyped,
    ChartColumnInfoToJSON,
    ChartColumnInfoToJSONTyped,
} from './ChartColumnInfo';
import type { DashboardFont } from './DashboardFont';
import {
    DashboardFontFromJSON,
    DashboardFontFromJSONTyped,
    DashboardFontToJSON,
    DashboardFontToJSONTyped,
} from './DashboardFont';

/**
 * 
 * @export
 * @interface Axes
 */
export interface Axes {
    /**
     * Describes location of the axis.
     * @type {string}
     * @memberof Axes
     */
    location?: AxesLocationEnum;
    /**
     * Axis title.
     * @type {string}
     * @memberof Axes
     */
    title?: string;
    /**
     * 
     * @type {ChartColumnInfo}
     * @memberof Axes
     */
    titleInfo?: ChartColumnInfo;
    /**
     * 
     * @type {DashboardFont}
     * @memberof Axes
     */
    axisTitleFont?: DashboardFont;
    /**
     * Describes the axis format (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)).
     * @type {string}
     * @memberof Axes
     */
    axisLabelFormat?: string;
    /**
     * 
     * @type {DashboardFont}
     * @memberof Axes
     */
    axisLabelFont?: DashboardFont;
    /**
     * Includes 0 in the axis.
     * @type {boolean}
     * @memberof Axes
     */
    includeZero?: boolean;
}


/**
 * @export
 */
export const AxesLocationEnum = {
    Bottom: 'BOTTOM',
    Left: 'LEFT',
    None: 'NONE',
    Right: 'RIGHT',
    Top: 'TOP'
} as const;
export type AxesLocationEnum = typeof AxesLocationEnum[keyof typeof AxesLocationEnum];


/**
 * Check if a given object implements the Axes interface.
 */
export function instanceOfAxes(value: object): value is Axes {
    return true;
}

export function AxesFromJSON(json: any): Axes {
    return AxesFromJSONTyped(json, false);
}

export function AxesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Axes {
    if (json == null) {
        return json;
    }
    return {
        
        'location': json['location'] == null ? undefined : json['location'],
        'title': json['title'] == null ? undefined : json['title'],
        'titleInfo': json['titleInfo'] == null ? undefined : ChartColumnInfoFromJSON(json['titleInfo']),
        'axisTitleFont': json['axisTitleFont'] == null ? undefined : DashboardFontFromJSON(json['axisTitleFont']),
        'axisLabelFormat': json['axisLabelFormat'] == null ? undefined : json['axisLabelFormat'],
        'axisLabelFont': json['axisLabelFont'] == null ? undefined : DashboardFontFromJSON(json['axisLabelFont']),
        'includeZero': json['includeZero'] == null ? undefined : json['includeZero'],
    };
}

export function AxesToJSON(json: any): Axes {
    return AxesToJSONTyped(json, false);
}

export function AxesToJSONTyped(value?: Axes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'location': value['location'],
        'title': value['title'],
        'titleInfo': ChartColumnInfoToJSON(value['titleInfo']),
        'axisTitleFont': DashboardFontToJSON(value['axisTitleFont']),
        'axisLabelFormat': value['axisLabelFormat'],
        'axisLabelFont': DashboardFontToJSON(value['axisLabelFont']),
        'includeZero': value['includeZero'],
    };
}

