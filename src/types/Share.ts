/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';

/**
 * 
 * @export
 * @interface Share
 */
export interface Share {
    /**
     * Share Id.
     * 
     * **NOTE**: unlike other Smartsheet object Ids, this Id is an alphanumeric string.
     * 
     * @type {string}
     * @memberof Share
     */
    id?: string;
    /**
     * Group Id if the share is a group share, else null.
     * @type {number}
     * @memberof Share
     */
    groupId?: number;
    /**
     * User Id if the share is a user share, else null.
     * @type {number}
     * @memberof Share
     */
    userId?: number;
    /**
     * The type of this share. One of the following values: GROUP or USER.
     * 
     * @type {string}
     * @memberof Share
     */
    type?: string;
    /**
     * 
     * @type {AccessLevel}
     * @memberof Share
     */
    accessLevel?: AccessLevel;
    /**
     * Indicates whether to send a copy of the email to the sharer of the sheet. You can specify this attribute
     * in a request, but it is never present in a response.
     * 
     * @type {boolean}
     * @memberof Share
     */
    ccMe?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof Share
     */
    createdAt?: Timestamp;
    /**
     * User's primary email address for user shares; null for group shares.
     * @type {string}
     * @memberof Share
     */
    email?: string;
    /**
     * The message included in the body of the email that is optionally sent to the recipient. You can specify
     * this attribute in a request, but it is never present in a response.
     * 
     * @type {string}
     * @memberof Share
     */
    message?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof Share
     */
    modifiedAt?: Timestamp;
    /**
     * If a user share and user is also a contact, the user's full name. If a group share, the group's name.
     * @type {string}
     * @memberof Share
     */
    name?: string;
    /**
     * The scope of this share. One of the following values:
     *   * **ITEM**: an item-level share (that is, the specific object to which the share applies is shared with
     *     the user or group).
     *   * **WORKSPACE**: a workspace-level share (that is, the workspace that contains the object to which the
     *     share applies is shared with the user or group).
     * 
     * @type {string}
     * @memberof Share
     */
    scope?: string;
    /**
     * The subject of the email that is optionally sent to notify the recipient. You can specify this attribute
     * in a request, but it is never present in a response.
     * 
     * @type {string}
     * @memberof Share
     */
    subject?: string;
}



/**
 * Check if a given object implements the Share interface.
 */
export function instanceOfShare(value: object): value is Share {
    return true;
}

export function ShareFromJSON(json: any): Share {
    return ShareFromJSONTyped(json, false);
}

export function ShareFromJSONTyped(json: any, ignoreDiscriminator: boolean): Share {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'type': json['type'] == null ? undefined : json['type'],
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'ccMe': json['ccMe'] == null ? undefined : json['ccMe'],
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'email': json['email'] == null ? undefined : json['email'],
        'message': json['message'] == null ? undefined : json['message'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'name': json['name'] == null ? undefined : json['name'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'subject': json['subject'] == null ? undefined : json['subject'],
    };
}

export function ShareToJSON(json: any): Share {
    return ShareToJSONTyped(json, false);
}

export function ShareToJSONTyped(value?: Share | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'groupId': value['groupId'],
        'userId': value['userId'],
        'type': value['type'],
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'ccMe': value['ccMe'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'email': value['email'],
        'message': value['message'],
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'name': value['name'],
        'scope': value['scope'],
        'subject': value['subject'],
    };
}

