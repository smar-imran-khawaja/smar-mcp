/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Query } from './Query';
import {
    QueryFromJSON,
    QueryFromJSONTyped,
    QueryToJSON,
    QueryToJSONTyped,
} from './Query';

/**
 * Smartsheet users can define and save personal column filters on sheets they can view.
 * @export
 * @interface Filters
 */
export interface Filters {
    /**
     * Filters Id.
     * @type {number}
     * @memberof Filters
     */
    id?: number;
    /**
     * If true, rows containing cells matching the values or criteria items are excluded instead of included.
     * @type {boolean}
     * @memberof Filters
     */
    excludeSelected?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Filters
     */
    filterType?: FiltersFilterTypeEnum;
    /**
     * 
     * @type {Query}
     * @memberof Filters
     */
    query?: Query;
}


/**
 * @export
 */
export const FiltersFilterTypeEnum = {
    Personal: 'PERSONAL',
    Shared: 'SHARED'
} as const;
export type FiltersFilterTypeEnum = typeof FiltersFilterTypeEnum[keyof typeof FiltersFilterTypeEnum];


/**
 * Check if a given object implements the Filters interface.
 */
export function instanceOfFilters(value: object): value is Filters {
    return true;
}

export function FiltersFromJSON(json: any): Filters {
    return FiltersFromJSONTyped(json, false);
}

export function FiltersFromJSONTyped(json: any, ignoreDiscriminator: boolean): Filters {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'excludeSelected': json['excludeSelected'] == null ? undefined : json['excludeSelected'],
        'filterType': json['filterType'] == null ? undefined : json['filterType'],
        'query': json['query'] == null ? undefined : QueryFromJSON(json['query']),
    };
}

export function FiltersToJSON(json: any): Filters {
    return FiltersToJSONTyped(json, false);
}

export function FiltersToJSONTyped(value?: Filters | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'excludeSelected': value['excludeSelected'],
        'filterType': value['filterType'],
        'query': QueryToJSON(value['query']),
    };
}

