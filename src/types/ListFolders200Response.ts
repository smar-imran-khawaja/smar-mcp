/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Folder } from './Folder';
import {
    FolderFromJSON,
    FolderFromJSONTyped,
    FolderToJSON,
    FolderToJSONTyped,
} from './Folder';

/**
 * 
 * @export
 * @interface ListFolders200Response
 */
export interface ListFolders200Response {
    /**
     * The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned.
     * @type {number}
     * @memberof ListFolders200Response
     */
    readonly pageNumber?: number;
    /**
     * The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints.
     * @type {number}
     * @memberof ListFolders200Response
     */
    readonly pageSize?: number | null;
    /**
     * The total number of pages in the full result set.
     * @type {number}
     * @memberof ListFolders200Response
     */
    readonly totalPages?: number;
    /**
     * The total number of items in the full result set.
     * @type {number}
     * @memberof ListFolders200Response
     */
    readonly totalCount?: number;
    /**
     * 
     * @type {Array<Folder>}
     * @memberof ListFolders200Response
     */
    result?: Array<Folder>;
}

/**
 * Check if a given object implements the ListFolders200Response interface.
 */
export function instanceOfListFolders200Response(value: object): value is ListFolders200Response {
    return true;
}

export function ListFolders200ResponseFromJSON(json: any): ListFolders200Response {
    return ListFolders200ResponseFromJSONTyped(json, false);
}

export function ListFolders200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListFolders200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'pageNumber': json['pageNumber'] == null ? undefined : json['pageNumber'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'totalPages': json['totalPages'] == null ? undefined : json['totalPages'],
        'totalCount': json['totalCount'] == null ? undefined : json['totalCount'],
        'result': json['result'] == null ? undefined : ((json['result'] as Array<any>).map(FolderFromJSON)),
    };
}

export function ListFolders200ResponseToJSON(json: any): ListFolders200Response {
    return ListFolders200ResponseToJSONTyped(json, false);
}

export function ListFolders200ResponseToJSONTyped(value?: Omit<ListFolders200Response, 'pageNumber'|'pageSize'|'totalPages'|'totalCount'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'result': value['result'] == null ? undefined : ((value['result'] as Array<any>).map(FolderToJSON)),
    };
}

