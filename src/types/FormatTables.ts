/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { FontFamily } from './FontFamily';
import {
    FontFamilyFromJSON,
    FontFamilyFromJSONTyped,
    FontFamilyToJSON,
    FontFamilyToJSONTyped,
} from './FontFamily';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';

/**
 * Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary.
 * @export
 * @interface FormatTables
 */
export interface FormatTables {
    /**
     * A format descriptor where each element describes the formats the Smartsheet Web app displays for format values that have not been set. Each value refers to an index of the following options.
     * @type {string}
     * @memberof FormatTables
     */
    defaults?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    bold?: Array<string>;
    /**
     * The default setting is "none". Typically this is black text and a white background.
     * @type {Array<string>}
     * @memberof FormatTables
     */
    color?: Array<string>;
    /**
     * 
     * @type {Array<Currency>}
     * @memberof FormatTables
     */
    currency?: Array<Currency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    dateFormat?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    decimalCount?: Array<string>;
    /**
     * 
     * @type {Array<FontFamily>}
     * @memberof FormatTables
     */
    fontFamily?: Array<FontFamily>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    fontSize?: Array<string>;
    /**
     * The default setting is "default" which is equivalent to "left".
     * @type {Array<string>}
     * @memberof FormatTables
     */
    horizontalAlign?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    italic?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    numberFormat?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    strikethrough?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    textWrap?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    thousandsSeparator?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormatTables
     */
    underline?: Array<string>;
    /**
     * The default setting is "default" which is equivalent to "top".
     * @type {Array<string>}
     * @memberof FormatTables
     */
    verticalAlign?: Array<string>;
}

/**
 * Check if a given object implements the FormatTables interface.
 */
export function instanceOfFormatTables(value: object): value is FormatTables {
    return true;
}

export function FormatTablesFromJSON(json: any): FormatTables {
    return FormatTablesFromJSONTyped(json, false);
}

export function FormatTablesFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormatTables {
    if (json == null) {
        return json;
    }
    return {
        
        'defaults': json['defaults'] == null ? undefined : json['defaults'],
        'bold': json['bold'] == null ? undefined : json['bold'],
        'color': json['color'] == null ? undefined : json['color'],
        'currency': json['currency'] == null ? undefined : ((json['currency'] as Array<any>).map(CurrencyFromJSON)),
        'dateFormat': json['dateFormat'] == null ? undefined : json['dateFormat'],
        'decimalCount': json['decimalCount'] == null ? undefined : json['decimalCount'],
        'fontFamily': json['fontFamily'] == null ? undefined : ((json['fontFamily'] as Array<any>).map(FontFamilyFromJSON)),
        'fontSize': json['fontSize'] == null ? undefined : json['fontSize'],
        'horizontalAlign': json['horizontalAlign'] == null ? undefined : json['horizontalAlign'],
        'italic': json['italic'] == null ? undefined : json['italic'],
        'numberFormat': json['numberFormat'] == null ? undefined : json['numberFormat'],
        'strikethrough': json['strikethrough'] == null ? undefined : json['strikethrough'],
        'textWrap': json['textWrap'] == null ? undefined : json['textWrap'],
        'thousandsSeparator': json['thousandsSeparator'] == null ? undefined : json['thousandsSeparator'],
        'underline': json['underline'] == null ? undefined : json['underline'],
        'verticalAlign': json['verticalAlign'] == null ? undefined : json['verticalAlign'],
    };
}

export function FormatTablesToJSON(json: any): FormatTables {
    return FormatTablesToJSONTyped(json, false);
}

export function FormatTablesToJSONTyped(value?: FormatTables | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'defaults': value['defaults'],
        'bold': value['bold'],
        'color': value['color'],
        'currency': value['currency'] == null ? undefined : ((value['currency'] as Array<any>).map(CurrencyToJSON)),
        'dateFormat': value['dateFormat'],
        'decimalCount': value['decimalCount'],
        'fontFamily': value['fontFamily'] == null ? undefined : ((value['fontFamily'] as Array<any>).map(FontFamilyToJSON)),
        'fontSize': value['fontSize'],
        'horizontalAlign': value['horizontalAlign'],
        'italic': value['italic'],
        'numberFormat': value['numberFormat'],
        'strikethrough': value['strikethrough'],
        'textWrap': value['textWrap'],
        'thousandsSeparator': value['thousandsSeparator'],
        'underline': value['underline'],
        'verticalAlign': value['verticalAlign'],
    };
}

