/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface FilteredEventsRequest
 */
export interface FilteredEventsRequest {
    /**
     * Array of sheet Ids used to filter events. Only events related to the specified sheet Ids are returned.
     * @type {Array<string>}
     * @memberof FilteredEventsRequest
     */
    sheetIds?: Array<string>;
    /**
     * Array of workspace Ids used to filter events. Only events related to the specified workspace Ids are returned.
     * @type {Array<string>}
     * @memberof FilteredEventsRequest
     */
    workspaceIds?: Array<string>;
    /**
     * The earliest time from which events are included in the response. Events before this time are excluded. This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
     * 
     * You must pass in a value for either `since` or `streamPosition` and never both.
     * @type {Date}
     * @memberof FilteredEventsRequest
     */
    since?: Date;
    /**
     * The latest time up to which events are included in the response. Events after this time are excluded. The `to` field requires using the `since` body field (above). This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).
     * 
     * If `to` is a future time, the current time is used. If `to` equals the `since` time, an empty data value is returned. If `to` is before the `since` time, an error is returned.
     * @type {Date}
     * @memberof FilteredEventsRequest
     */
    to?: Date;
    /**
     * Indicates next set of events to return. Use value of `nextStreamPosition` returned from the previous call.
     * You must pass in a value for either `since` or `streamPosition` and never both.
     * @type {string}
     * @memberof FilteredEventsRequest
     */
    streamPosition?: string;
    /**
     * Maximum number of events to return as response to this call.
     * Must be between 1 through 10,000 (inclusive).
     * Defaults to 1,000 if not specified.
     * @type {number}
     * @memberof FilteredEventsRequest
     */
    maxCount?: number;
    /**
     * If true, dates are accepted and returned in Unix epoch time (milliseconds since midnight on January 1, 1970 in UTC time).
     * Default is false, which means ISO-8601 format.
     * @type {boolean}
     * @memberof FilteredEventsRequest
     */
    numericDates?: boolean;
    /**
     * The target managed plan for which to list events. Authorized if the caller is a licensed user on either the target managed plan or the main plan in EPM hierarchy.
     * @type {number}
     * @memberof FilteredEventsRequest
     */
    managedPlanId?: number;
}

/**
 * Check if a given object implements the FilteredEventsRequest interface.
 */
export function instanceOfFilteredEventsRequest(value: object): value is FilteredEventsRequest {
    return true;
}

export function FilteredEventsRequestFromJSON(json: any): FilteredEventsRequest {
    return FilteredEventsRequestFromJSONTyped(json, false);
}

export function FilteredEventsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FilteredEventsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'sheetIds': json['sheetIds'] == null ? undefined : json['sheetIds'],
        'workspaceIds': json['workspaceIds'] == null ? undefined : json['workspaceIds'],
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'to': json['to'] == null ? undefined : (new Date(json['to'])),
        'streamPosition': json['streamPosition'] == null ? undefined : json['streamPosition'],
        'maxCount': json['maxCount'] == null ? undefined : json['maxCount'],
        'numericDates': json['numericDates'] == null ? undefined : json['numericDates'],
        'managedPlanId': json['managedPlanId'] == null ? undefined : json['managedPlanId'],
    };
}

export function FilteredEventsRequestToJSON(json: any): FilteredEventsRequest {
    return FilteredEventsRequestToJSONTyped(json, false);
}

export function FilteredEventsRequestToJSONTyped(value?: FilteredEventsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sheetIds': value['sheetIds'],
        'workspaceIds': value['workspaceIds'],
        'since': value['since'] == null ? undefined : ((value['since']).toISOString()),
        'to': value['to'] == null ? undefined : ((value['to']).toISOString()),
        'streamPosition': value['streamPosition'],
        'maxCount': value['maxCount'],
        'numericDates': value['numericDates'],
        'managedPlanId': value['managedPlanId'],
    };
}

