/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ObjectValue } from './ObjectValue';
import {
    ObjectValueFromJSON,
    ObjectValueFromJSONTyped,
    ObjectValueToJSON,
    ObjectValueToJSONTyped,
} from './ObjectValue';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface SummaryFieldAddImage
 */
export interface SummaryFieldAddImage {
    /**
     * SummaryField Id.
     * @type {number}
     * @memberof SummaryFieldAddImage
     */
    id?: number;
    /**
     * Field index or position. This number is zero-based.
     * @type {number}
     * @memberof SummaryFieldAddImage
     */
    index?: number;
    /**
     * Arbitrary name, must be unique within summary.
     * @type {string}
     * @memberof SummaryFieldAddImage
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SummaryFieldAddImage
     */
    type?: SummaryFieldAddImageTypeEnum;
    /**
     * Indicates whether the field is locked.
     * @type {boolean}
     * @memberof SummaryFieldAddImage
     */
    locked?: boolean;
    /**
     * Indicates whether the field is locked for the requesting user.
     * @type {boolean}
     * @memberof SummaryFieldAddImage
     */
    lockedForUser?: boolean;
    /**
     * 
     * @type {ObjectValue}
     * @memberof SummaryFieldAddImage
     */
    objectValue?: ObjectValue;
    /**
     * The formula for a cell, if set.
     * @type {string}
     * @memberof SummaryFieldAddImage
     */
    formula?: string;
    /**
     * 
     * @type {Image}
     * @memberof SummaryFieldAddImage
     */
    image?: Image;
    /**
     * 
     * @type {Timestamp}
     * @memberof SummaryFieldAddImage
     */
    createdAt?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof SummaryFieldAddImage
     */
    modifiedAt?: Timestamp;
    /**
     * Sheet version number that is incremented every time a sheet is modified.
     * @type {number}
     * @memberof SummaryFieldAddImage
     */
    version?: number;
}


/**
 * @export
 */
export const SummaryFieldAddImageTypeEnum = {
    AbstractDatetime: 'ABSTRACT_DATETIME',
    Checkbox: 'CHECKBOX',
    ContactList: 'CONTACT_LIST',
    Date: 'DATE',
    Datetime: 'DATETIME',
    Duration: 'DURATION',
    MultiContactList: 'MULTI_CONTACT_LIST',
    MultiPicklist: 'MULTI_PICKLIST',
    Picklist: 'PICKLIST',
    Predecessor: 'PREDECESSOR',
    TextNumber: 'TEXT_NUMBER'
} as const;
export type SummaryFieldAddImageTypeEnum = typeof SummaryFieldAddImageTypeEnum[keyof typeof SummaryFieldAddImageTypeEnum];


/**
 * Check if a given object implements the SummaryFieldAddImage interface.
 */
export function instanceOfSummaryFieldAddImage(value: object): value is SummaryFieldAddImage {
    return true;
}

export function SummaryFieldAddImageFromJSON(json: any): SummaryFieldAddImage {
    return SummaryFieldAddImageFromJSONTyped(json, false);
}

export function SummaryFieldAddImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): SummaryFieldAddImage {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'index': json['index'] == null ? undefined : json['index'],
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : json['type'],
        'locked': json['locked'] == null ? undefined : json['locked'],
        'lockedForUser': json['lockedForUser'] == null ? undefined : json['lockedForUser'],
        'objectValue': json['objectValue'] == null ? undefined : ObjectValueFromJSON(json['objectValue']),
        'formula': json['formula'] == null ? undefined : json['formula'],
        'image': json['image'] == null ? undefined : ImageFromJSON(json['image']),
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function SummaryFieldAddImageToJSON(json: any): SummaryFieldAddImage {
    return SummaryFieldAddImageToJSONTyped(json, false);
}

export function SummaryFieldAddImageToJSONTyped(value?: SummaryFieldAddImage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'index': value['index'],
        'title': value['title'],
        'type': value['type'],
        'locked': value['locked'],
        'lockedForUser': value['lockedForUser'],
        'objectValue': ObjectValueToJSON(value['objectValue']),
        'formula': value['formula'],
        'image': ImageToJSON(value['image']),
        'createdAt': TimestampToJSON(value['createdAt']),
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'version': value['version'],
    };
}

