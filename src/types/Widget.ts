/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { WidgetContents } from './WidgetContents';
import {
    WidgetContentsFromJSON,
    WidgetContentsFromJSONTyped,
    WidgetContentsToJSON,
    WidgetContentsToJSONTyped,
} from './WidgetContents';
import type { DashboardFont } from './DashboardFont';
import {
    DashboardFontFromJSON,
    DashboardFontFromJSONTyped,
    DashboardFontToJSON,
    DashboardFontToJSONTyped,
} from './DashboardFont';

/**
 * 
 * @export
 * @interface Widget
 */
export interface Widget {
    /**
     * Widget Id.
     * @type {number}
     * @memberof Widget
     */
    id?: number;
    /**
     * Type of widget.
     * @type {string}
     * @memberof Widget
     */
    type?: WidgetTypeEnum;
    /**
     * 
     * @type {WidgetContents}
     * @memberof Widget
     */
    contents?: WidgetContents;
    /**
     * Number of rows that the widget occupies on the dashboard.
     * @type {number}
     * @memberof Widget
     */
    height?: number;
    /**
     * True indicates that the client should display the widget title. This is independent of the title string which may be null or empty.
     * @type {boolean}
     * @memberof Widget
     */
    showTitle?: boolean;
    /**
     * True indicates that the client should display the sheet icon in the widget title.
     * @type {boolean}
     * @memberof Widget
     */
    showTitleIcon?: boolean;
    /**
     * Title of the widget.
     * @type {string}
     * @memberof Widget
     */
    title?: string;
    /**
     * Title format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)).
     * @type {string}
     * @memberof Widget
     */
    titleFormat?: string;
    /**
     * 
     * @type {DashboardFont}
     * @memberof Widget
     */
    titleFont?: DashboardFont;
    /**
     * Widget version number.
     * @type {number}
     * @memberof Widget
     */
    version?: number;
    /**
     * Indicates the content layout. Must use a query parameter of level=2 to see this information.
     *  * 1 - centered
     *  * 2 - left aligned
     * 
     * @type {number}
     * @memberof Widget
     */
    viewMode?: WidgetViewModeEnum;
    /**
     * Number of columns that the widget occupies on the dashboard.
     * @type {number}
     * @memberof Widget
     */
    width?: number;
    /**
     * X-coordinate of widget's position on the dashboard.
     * @type {number}
     * @memberof Widget
     */
    xPosition?: number;
    /**
     * Y-coordinate of widget's position on the dashboard.
     * @type {number}
     * @memberof Widget
     */
    yPosition?: number;
}


/**
 * @export
 */
export const WidgetTypeEnum = {
    Chart: 'CHART',
    Gridgantt: 'GRIDGANTT',
    Image: 'IMAGE',
    Metric: 'METRIC',
    Richtext: 'RICHTEXT',
    Sheetsummary: 'SHEETSUMMARY',
    Shortcut: 'SHORTCUT',
    Shortcuticon: 'SHORTCUTICON',
    Shortcutlist: 'SHORTCUTLIST',
    Title: 'TITLE',
    Webcontent: 'WEBCONTENT'
} as const;
export type WidgetTypeEnum = typeof WidgetTypeEnum[keyof typeof WidgetTypeEnum];

/**
 * @export
 */
export const WidgetViewModeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type WidgetViewModeEnum = typeof WidgetViewModeEnum[keyof typeof WidgetViewModeEnum];


/**
 * Check if a given object implements the Widget interface.
 */
export function instanceOfWidget(value: object): value is Widget {
    return true;
}

export function WidgetFromJSON(json: any): Widget {
    return WidgetFromJSONTyped(json, false);
}

export function WidgetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Widget {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'contents': json['contents'] == null ? undefined : WidgetContentsFromJSON(json['contents']),
        'height': json['height'] == null ? undefined : json['height'],
        'showTitle': json['showTitle'] == null ? undefined : json['showTitle'],
        'showTitleIcon': json['showTitleIcon'] == null ? undefined : json['showTitleIcon'],
        'title': json['title'] == null ? undefined : json['title'],
        'titleFormat': json['titleFormat'] == null ? undefined : json['titleFormat'],
        'titleFont': json['titleFont'] == null ? undefined : DashboardFontFromJSON(json['titleFont']),
        'version': json['version'] == null ? undefined : json['version'],
        'viewMode': json['viewMode'] == null ? undefined : json['viewMode'],
        'width': json['width'] == null ? undefined : json['width'],
        'xPosition': json['xPosition'] == null ? undefined : json['xPosition'],
        'yPosition': json['yPosition'] == null ? undefined : json['yPosition'],
    };
}

export function WidgetToJSON(json: any): Widget {
    return WidgetToJSONTyped(json, false);
}

export function WidgetToJSONTyped(value?: Widget | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'contents': WidgetContentsToJSON(value['contents']),
        'height': value['height'],
        'showTitle': value['showTitle'],
        'showTitleIcon': value['showTitleIcon'],
        'title': value['title'],
        'titleFormat': value['titleFormat'],
        'titleFont': DashboardFontToJSON(value['titleFont']),
        'version': value['version'],
        'viewMode': value['viewMode'],
        'width': value['width'],
        'xPosition': value['xPosition'],
        'yPosition': value['yPosition'],
    };
}

