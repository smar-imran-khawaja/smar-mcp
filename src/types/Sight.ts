/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Widget } from './Widget';
import {
    WidgetFromJSON,
    WidgetFromJSONTyped,
    WidgetToJSON,
    WidgetToJSONTyped,
} from './Widget';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';
import type { Source } from './Source';
import {
    SourceFromJSON,
    SourceFromJSONTyped,
    SourceToJSON,
    SourceToJSONTyped,
} from './Source';

/**
 * 
 * @export
 * @interface Sight
 */
export interface Sight {
    /**
     * The hex color, for instance `#E6F5FE`.
     * @type {string}
     * @memberof Sight
     */
    readonly backgroundColor?: string;
    /**
     * The hex color of the background color for all widgets except for title widgets on the dashboard, for instance `#E6F5FEF4` or `#E6F5FE`.
     * @type {string}
     * @memberof Sight
     */
    readonly defaultWidgetBackgroundColor?: string;
    /**
     * Number of columns that the dashboard contains.
     * @type {number}
     * @memberof Sight
     */
    readonly columnCount?: number;
    /**
     * 
     * @type {Source}
     * @memberof Sight
     */
    source?: Source;
    /**
     * 
     * @type {Array<Widget>}
     * @memberof Sight
     */
    readonly widgets?: Array<Widget>;
    /**
     * A reference to the dashboard's workspace, if the dashboard is in a workspace; otherwise an empty value.
     * @type {object}
     * @memberof Sight
     */
    workspace?: object;
    /**
     * 
     * @type {Timestamp}
     * @memberof Sight
     */
    createdAt?: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof Sight
     */
    modifiedAt?: Timestamp;
    /**
     * Dashboard Id.
     * @type {number}
     * @memberof Sight
     */
    readonly id?: number;
    /**
     * 
     * @type {AccessLevel}
     * @memberof Sight
     */
    accessLevel?: AccessLevel;
    /**
     * URL that represents a direct link to the dashboard in Smartsheet.
     * @type {string}
     * @memberof Sight
     */
    readonly permalink?: string;
    /**
     * Dashboard name.
     * @type {string}
     * @memberof Sight
     */
    name?: string;
}



/**
 * Check if a given object implements the Sight interface.
 */
export function instanceOfSight(value: object): value is Sight {
    return true;
}

export function SightFromJSON(json: any): Sight {
    return SightFromJSONTyped(json, false);
}

export function SightFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sight {
    if (json == null) {
        return json;
    }
    return {
        
        'backgroundColor': json['backgroundColor'] == null ? undefined : json['backgroundColor'],
        'defaultWidgetBackgroundColor': json['defaultWidgetBackgroundColor'] == null ? undefined : json['defaultWidgetBackgroundColor'],
        'columnCount': json['columnCount'] == null ? undefined : json['columnCount'],
        'source': json['source'] == null ? undefined : SourceFromJSON(json['source']),
        'widgets': json['widgets'] == null ? undefined : ((json['widgets'] as Array<any>).map(WidgetFromJSON)),
        'workspace': json['workspace'] == null ? undefined : json['workspace'],
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'id': json['id'] == null ? undefined : json['id'],
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'permalink': json['permalink'] == null ? undefined : json['permalink'],
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function SightToJSON(json: any): Sight {
    return SightToJSONTyped(json, false);
}

export function SightToJSONTyped(value?: Omit<Sight, 'backgroundColor'|'defaultWidgetBackgroundColor'|'columnCount'|'widgets'|'id'|'permalink'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source': SourceToJSON(value['source']),
        'workspace': value['workspace'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'name': value['name'],
    };
}

