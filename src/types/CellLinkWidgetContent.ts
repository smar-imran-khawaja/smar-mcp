/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { CellDataItem } from './CellDataItem';
import {
    CellDataItemFromJSON,
    CellDataItemFromJSONTyped,
    CellDataItemToJSON,
    CellDataItemToJSONTyped,
} from './CellDataItem';
import type { Column } from './Column';
import {
    ColumnFromJSON,
    ColumnFromJSONTyped,
    ColumnToJSON,
    ColumnToJSONTyped,
} from './Column';
import type { WidgetHyperlink } from './WidgetHyperlink';
import {
    WidgetHyperlinkFromJSON,
    WidgetHyperlinkFromJSONTyped,
    WidgetHyperlinkToJSON,
    WidgetHyperlinkToJSONTyped,
} from './WidgetHyperlink';

/**
 * 
 * @export
 * @interface CellLinkWidgetContent
 */
export interface CellLinkWidgetContent {
    /**
     * 
     * @type {string}
     * @memberof CellLinkWidgetContent
     */
    type?: CellLinkWidgetContentTypeEnum;
    /**
     * Sheet Id from which the cell data originates.
     * @type {number}
     * @memberof CellLinkWidgetContent
     */
    sheetId?: number;
    /**
     * 
     * @type {Array<CellDataItem>}
     * @memberof CellLinkWidgetContent
     */
    cellData?: Array<CellDataItem>;
    /**
     * 
     * @type {Array<Column>}
     * @memberof CellLinkWidgetContent
     */
    columns?: Array<Column>;
    /**
     * 
     * @type {WidgetHyperlink}
     * @memberof CellLinkWidgetContent
     */
    hyperlink?: WidgetHyperlink;
}


/**
 * @export
 */
export const CellLinkWidgetContentTypeEnum = {
    Metric: 'METRIC',
    Sheetsummary: 'SHEETSUMMARY'
} as const;
export type CellLinkWidgetContentTypeEnum = typeof CellLinkWidgetContentTypeEnum[keyof typeof CellLinkWidgetContentTypeEnum];


/**
 * Check if a given object implements the CellLinkWidgetContent interface.
 */
export function instanceOfCellLinkWidgetContent(value: object): value is CellLinkWidgetContent {
    return true;
}

export function CellLinkWidgetContentFromJSON(json: any): CellLinkWidgetContent {
    return CellLinkWidgetContentFromJSONTyped(json, false);
}

export function CellLinkWidgetContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CellLinkWidgetContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'cellData': json['cellData'] == null ? undefined : ((json['cellData'] as Array<any>).map(CellDataItemFromJSON)),
        'columns': json['columns'] == null ? undefined : ((json['columns'] as Array<any>).map(ColumnFromJSON)),
        'hyperlink': json['hyperlink'] == null ? undefined : WidgetHyperlinkFromJSON(json['hyperlink']),
    };
}

export function CellLinkWidgetContentToJSON(json: any): CellLinkWidgetContent {
    return CellLinkWidgetContentToJSONTyped(json, false);
}

export function CellLinkWidgetContentToJSONTyped(value?: CellLinkWidgetContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'sheetId': value['sheetId'],
        'cellData': value['cellData'] == null ? undefined : ((value['cellData'] as Array<any>).map(CellDataItemToJSON)),
        'columns': value['columns'] == null ? undefined : ((value['columns'] as Array<any>).map(ColumnToJSON)),
        'hyperlink': WidgetHyperlinkToJSON(value['hyperlink']),
    };
}

