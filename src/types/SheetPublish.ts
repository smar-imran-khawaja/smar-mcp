/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Describes the sheet's publish settings.
 * @export
 * @interface SheetPublish
 */
export interface SheetPublish {
    /**
     * If **true**, a webcal is available for the calendar in the sheet.
     * @type {boolean}
     * @memberof SheetPublish
     */
    icalEnabled?: boolean;
    /**
     * URL for **iCal** view of the published sheet. Only returned in a response if **icalEnabled = true**.
     * 
     * @type {any}
     * @memberof SheetPublish
     */
    icalUrl?: any | null;
    /**
     * Indicates who can access the 'Read-Only Full' view of the published sheet:
     *   * ALL - available to anyone who has the link.
     *   * ORG - available only to members of the sheet owner's Smartsheet organization account.
     *   * SHARED - available only to users shared to the item.
     * 
     * Only returned in the response if **readOnlyFullEnabled = true**.
     * 
     * @type {string}
     * @memberof SheetPublish
     */
    readOnlyFullAccessibleBy?: SheetPublishReadOnlyFullAccessibleByEnum;
    /**
     * Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values.
     * 
     * @type {string}
     * @memberof SheetPublish
     */
    readOnlyFullDefaultView?: SheetPublishReadOnlyFullDefaultViewEnum;
    /**
     * If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublish
     */
    readOnlyFullEnabled?: boolean;
    /**
     * Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.
     * @type {boolean}
     * @memberof SheetPublish
     * @deprecated
     */
    readOnlyFullShowToolbar?: boolean;
    /**
     * URL for 'Read-Only Full' view of the published sheet. Only returned in a response if **readOnlyFullEnabled = true.
     * @type {string}
     * @memberof SheetPublish
     */
    readOnlyFullUrl?: string;
    /**
     * If **true**, a lightweight version of the sheet is published without row attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublish
     */
    readOnlyLiteEnabled?: boolean;
    /**
     * URL for 'Read-Only' view of the published sheet when SSL is enabled.
     * @type {string}
     * @memberof SheetPublish
     */
    readOnlyLiteSslUrl?: string;
    /**
     * URL for 'Read-Only HTML' view of the published sheet. Only returned in a response if **readOnlyLiteEnabled = true**.
     * @type {string}
     * @memberof SheetPublish
     */
    readOnlyLiteUrl?: string;
    /**
     * Indicates who can access the 'Edit by Anyone' view of the published sheet:
     *   * ALL - available to anyone who has the link.
     *   * ORG - available only to members of the sheet owner's Smartsheet organization account.
     *   * SHARED - available only to users shared to the item.
     * 
     * Only returned in the response if **readWriteEnabled = true**.
     * 
     * @type {string}
     * @memberof SheetPublish
     */
    readWriteAccessibleBy?: SheetPublishReadWriteAccessibleByEnum;
    /**
     * Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values.
     * 
     * @type {string}
     * @memberof SheetPublish
     */
    readWriteDefaultView?: SheetPublishReadWriteDefaultViewEnum;
    /**
     * If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.
     * @type {boolean}
     * @memberof SheetPublish
     */
    readWriteEnabled?: boolean;
    /**
     * Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.
     * @type {boolean}
     * @memberof SheetPublish
     * @deprecated
     */
    readWriteShowToolbar?: boolean;
    /**
     * URL for 'Edit by Anyone' view of the published sheet. Only returned in a response if **readWriteEnabled = true**.
     * @type {string}
     * @memberof SheetPublish
     */
    readWriteUrl?: string;
}


/**
 * @export
 */
export const SheetPublishReadOnlyFullAccessibleByEnum = {
    All: 'ALL',
    Org: 'ORG',
    Shared: 'SHARED'
} as const;
export type SheetPublishReadOnlyFullAccessibleByEnum = typeof SheetPublishReadOnlyFullAccessibleByEnum[keyof typeof SheetPublishReadOnlyFullAccessibleByEnum];

/**
 * @export
 */
export const SheetPublishReadOnlyFullDefaultViewEnum = {
    Calendar: 'CALENDAR',
    Card: 'CARD',
    Grid: 'GRID'
} as const;
export type SheetPublishReadOnlyFullDefaultViewEnum = typeof SheetPublishReadOnlyFullDefaultViewEnum[keyof typeof SheetPublishReadOnlyFullDefaultViewEnum];

/**
 * @export
 */
export const SheetPublishReadWriteAccessibleByEnum = {
    All: 'ALL',
    Org: 'ORG',
    Shared: 'SHARED'
} as const;
export type SheetPublishReadWriteAccessibleByEnum = typeof SheetPublishReadWriteAccessibleByEnum[keyof typeof SheetPublishReadWriteAccessibleByEnum];

/**
 * @export
 */
export const SheetPublishReadWriteDefaultViewEnum = {
    Calendar: 'CALENDAR',
    Card: 'CARD',
    Grid: 'GRID'
} as const;
export type SheetPublishReadWriteDefaultViewEnum = typeof SheetPublishReadWriteDefaultViewEnum[keyof typeof SheetPublishReadWriteDefaultViewEnum];


/**
 * Check if a given object implements the SheetPublish interface.
 */
export function instanceOfSheetPublish(value: object): value is SheetPublish {
    return true;
}

export function SheetPublishFromJSON(json: any): SheetPublish {
    return SheetPublishFromJSONTyped(json, false);
}

export function SheetPublishFromJSONTyped(json: any, ignoreDiscriminator: boolean): SheetPublish {
    if (json == null) {
        return json;
    }
    return {
        
        'icalEnabled': json['icalEnabled'] == null ? undefined : json['icalEnabled'],
        'icalUrl': json['icalUrl'] == null ? undefined : json['icalUrl'],
        'readOnlyFullAccessibleBy': json['readOnlyFullAccessibleBy'] == null ? undefined : json['readOnlyFullAccessibleBy'],
        'readOnlyFullDefaultView': json['readOnlyFullDefaultView'] == null ? undefined : json['readOnlyFullDefaultView'],
        'readOnlyFullEnabled': json['readOnlyFullEnabled'] == null ? undefined : json['readOnlyFullEnabled'],
        'readOnlyFullShowToolbar': json['readOnlyFullShowToolbar'] == null ? undefined : json['readOnlyFullShowToolbar'],
        'readOnlyFullUrl': json['readOnlyFullUrl'] == null ? undefined : json['readOnlyFullUrl'],
        'readOnlyLiteEnabled': json['readOnlyLiteEnabled'] == null ? undefined : json['readOnlyLiteEnabled'],
        'readOnlyLiteSslUrl': json['readOnlyLiteSslUrl'] == null ? undefined : json['readOnlyLiteSslUrl'],
        'readOnlyLiteUrl': json['readOnlyLiteUrl'] == null ? undefined : json['readOnlyLiteUrl'],
        'readWriteAccessibleBy': json['readWriteAccessibleBy'] == null ? undefined : json['readWriteAccessibleBy'],
        'readWriteDefaultView': json['readWriteDefaultView'] == null ? undefined : json['readWriteDefaultView'],
        'readWriteEnabled': json['readWriteEnabled'] == null ? undefined : json['readWriteEnabled'],
        'readWriteShowToolbar': json['readWriteShowToolbar'] == null ? undefined : json['readWriteShowToolbar'],
        'readWriteUrl': json['readWriteUrl'] == null ? undefined : json['readWriteUrl'],
    };
}

export function SheetPublishToJSON(json: any): SheetPublish {
    return SheetPublishToJSONTyped(json, false);
}

export function SheetPublishToJSONTyped(value?: SheetPublish | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'icalEnabled': value['icalEnabled'],
        'icalUrl': value['icalUrl'],
        'readOnlyFullAccessibleBy': value['readOnlyFullAccessibleBy'],
        'readOnlyFullDefaultView': value['readOnlyFullDefaultView'],
        'readOnlyFullEnabled': value['readOnlyFullEnabled'],
        'readOnlyFullShowToolbar': value['readOnlyFullShowToolbar'],
        'readOnlyFullUrl': value['readOnlyFullUrl'],
        'readOnlyLiteEnabled': value['readOnlyLiteEnabled'],
        'readOnlyLiteSslUrl': value['readOnlyLiteSslUrl'],
        'readOnlyLiteUrl': value['readOnlyLiteUrl'],
        'readWriteAccessibleBy': value['readWriteAccessibleBy'],
        'readWriteDefaultView': value['readWriteDefaultView'],
        'readWriteEnabled': value['readWriteEnabled'],
        'readWriteShowToolbar': value['readWriteShowToolbar'],
        'readWriteUrl': value['readWriteUrl'],
    };
}

