/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
    AccountToJSONTyped,
} from './Account';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';
import type { ProfileImage } from './ProfileImage';
import {
    ProfileImageFromJSON,
    ProfileImageFromJSONTyped,
    ProfileImageToJSON,
    ProfileImageToJSONTyped,
} from './ProfileImage';
import type { AlternateEmail } from './AlternateEmail';
import {
    AlternateEmailFromJSON,
    AlternateEmailFromJSONTyped,
    AlternateEmailToJSON,
    AlternateEmailToJSONTyped,
} from './AlternateEmail';

/**
 * 
 * @export
 * @interface GetCurrentUser200Response
 */
export interface GetCurrentUser200Response {
    /**
     * Current user's Id.
     * @type {number}
     * @memberof GetCurrentUser200Response
     */
    id?: number;
    /**
     * 
     * @type {Account}
     * @memberof GetCurrentUser200Response
     */
    account?: Account;
    /**
     * Indicates whether the user is a system admin (can manage user accounts and organization account).
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    admin?: boolean;
    /**
     * 
     * @type {AlternateEmail}
     * @memberof GetCurrentUser200Response
     */
    alternateEmails?: AlternateEmail;
    /**
     * User's company.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    company?: string;
    /**
     * Timestamp of viewing an <a href="https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only" target="_blank" rel="noopener noreferrer">Enterprise Custom Welcome Screen</a> by the current user.
     * @type {Date}
     * @memberof GetCurrentUser200Response
     */
    customWelcomeScreenViewed?: Date;
    /**
     * User's department.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    department?: string;
    /**
     * Current user's primary email address.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    email?: string;
    /**
     * Current user's first name.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    firstName?: string;
    /**
     * Indicates whether the user is a group admin (can create and edit groups).
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    groupAdmin?: boolean;
    /**
     * Indicates whether the user is a JIRA admin.
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    jiraAdmin?: boolean;
    /**
     * Last login time of the current user.
     * @type {Date}
     * @memberof GetCurrentUser200Response
     */
    lastLogin?: Date;
    /**
     * Current user's last name.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    lastName?: string;
    /**
     * Indicates whether the user is a licensed user (can create and own sheets).
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    licensedSheetCreator?: boolean;
    /**
     * Current user's locale (see [ServerInfo](/api/smartsheet/openapi/serverinfo/serverinfo)).
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    locale?: string;
    /**
     * User's mobile phone number.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    mobilePhone?: string;
    /**
     * 
     * @type {ProfileImage}
     * @memberof GetCurrentUser200Response
     */
    profileImage?: ProfileImage;
    /**
     * Indicates whether the user is a resource viewer (can access resource views).
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    resourceViewer?: boolean;
    /**
     * User's role.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    role?: string;
    /**
     * Indicates whether the user is a Salesforce admin.
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    salesforceAdmin?: boolean;
    /**
     * Indicates whether the user is a registered Salesforce user.
     * @type {boolean}
     * @memberof GetCurrentUser200Response
     */
    salesforceUser?: boolean;
    /**
     * **SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.
     * 
     * @type {number}
     * @memberof GetCurrentUser200Response
     * @deprecated
     */
    sheetCount?: number;
    /**
     * Current user's time zone Id.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    timeZone?: string;
    /**
     * User's title.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    title?: string;
    /**
     * User's work phone number.
     * @type {string}
     * @memberof GetCurrentUser200Response
     */
    workPhone?: string;
    /**
     * List of Groups
     * @type {Array<Group>}
     * @memberof GetCurrentUser200Response
     */
    data?: Array<Group>;
}

/**
 * Check if a given object implements the GetCurrentUser200Response interface.
 */
export function instanceOfGetCurrentUser200Response(value: object): value is GetCurrentUser200Response {
    return true;
}

export function GetCurrentUser200ResponseFromJSON(json: any): GetCurrentUser200Response {
    return GetCurrentUser200ResponseFromJSONTyped(json, false);
}

export function GetCurrentUser200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCurrentUser200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'account': json['account'] == null ? undefined : AccountFromJSON(json['account']),
        'admin': json['admin'] == null ? undefined : json['admin'],
        'alternateEmails': json['alternateEmails'] == null ? undefined : AlternateEmailFromJSON(json['alternateEmails']),
        'company': json['company'] == null ? undefined : json['company'],
        'customWelcomeScreenViewed': json['customWelcomeScreenViewed'] == null ? undefined : (new Date(json['customWelcomeScreenViewed'])),
        'department': json['department'] == null ? undefined : json['department'],
        'email': json['email'] == null ? undefined : json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'groupAdmin': json['groupAdmin'] == null ? undefined : json['groupAdmin'],
        'jiraAdmin': json['jiraAdmin'] == null ? undefined : json['jiraAdmin'],
        'lastLogin': json['lastLogin'] == null ? undefined : (new Date(json['lastLogin'])),
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'licensedSheetCreator': json['licensedSheetCreator'] == null ? undefined : json['licensedSheetCreator'],
        'locale': json['locale'] == null ? undefined : json['locale'],
        'mobilePhone': json['mobilePhone'] == null ? undefined : json['mobilePhone'],
        'profileImage': json['profileImage'] == null ? undefined : ProfileImageFromJSON(json['profileImage']),
        'resourceViewer': json['resourceViewer'] == null ? undefined : json['resourceViewer'],
        'role': json['role'] == null ? undefined : json['role'],
        'salesforceAdmin': json['salesforceAdmin'] == null ? undefined : json['salesforceAdmin'],
        'salesforceUser': json['salesforceUser'] == null ? undefined : json['salesforceUser'],
        'sheetCount': json['sheetCount'] == null ? undefined : json['sheetCount'],
        'timeZone': json['timeZone'] == null ? undefined : json['timeZone'],
        'title': json['title'] == null ? undefined : json['title'],
        'workPhone': json['workPhone'] == null ? undefined : json['workPhone'],
        'data': json['data'] == null ? undefined : ((json['data'] as Array<any>).map(GroupFromJSON)),
    };
}

export function GetCurrentUser200ResponseToJSON(json: any): GetCurrentUser200Response {
    return GetCurrentUser200ResponseToJSONTyped(json, false);
}

export function GetCurrentUser200ResponseToJSONTyped(value?: GetCurrentUser200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'account': AccountToJSON(value['account']),
        'admin': value['admin'],
        'alternateEmails': AlternateEmailToJSON(value['alternateEmails']),
        'company': value['company'],
        'customWelcomeScreenViewed': value['customWelcomeScreenViewed'] == null ? undefined : ((value['customWelcomeScreenViewed']).toISOString()),
        'department': value['department'],
        'email': value['email'],
        'firstName': value['firstName'],
        'groupAdmin': value['groupAdmin'],
        'jiraAdmin': value['jiraAdmin'],
        'lastLogin': value['lastLogin'] == null ? undefined : ((value['lastLogin']).toISOString()),
        'lastName': value['lastName'],
        'licensedSheetCreator': value['licensedSheetCreator'],
        'locale': value['locale'],
        'mobilePhone': value['mobilePhone'],
        'profileImage': ProfileImageToJSON(value['profileImage']),
        'resourceViewer': value['resourceViewer'],
        'role': value['role'],
        'salesforceAdmin': value['salesforceAdmin'],
        'salesforceUser': value['salesforceUser'],
        'sheetCount': value['sheetCount'],
        'timeZone': value['timeZone'],
        'title': value['title'],
        'workPhone': value['workPhone'],
        'data': value['data'] == null ? undefined : ((value['data'] as Array<any>).map(GroupToJSON)),
    };
}

