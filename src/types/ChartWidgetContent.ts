/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Series } from './Series';
import {
    SeriesFromJSON,
    SeriesFromJSONTyped,
    SeriesToJSON,
    SeriesToJSONTyped,
} from './Series';
import type { Legend } from './Legend';
import {
    LegendFromJSON,
    LegendFromJSONTyped,
    LegendToJSON,
    LegendToJSONTyped,
} from './Legend';
import type { SelectionRange } from './SelectionRange';
import {
    SelectionRangeFromJSON,
    SelectionRangeFromJSONTyped,
    SelectionRangeToJSON,
    SelectionRangeToJSONTyped,
} from './SelectionRange';
import type { Axes } from './Axes';
import {
    AxesFromJSON,
    AxesFromJSONTyped,
    AxesToJSON,
    AxesToJSONTyped,
} from './Axes';
import type { WidgetChartGridLine } from './WidgetChartGridLine';
import {
    WidgetChartGridLineFromJSON,
    WidgetChartGridLineFromJSONTyped,
    WidgetChartGridLineToJSON,
    WidgetChartGridLineToJSONTyped,
} from './WidgetChartGridLine';
import type { WidgetHyperlink } from './WidgetHyperlink';
import {
    WidgetHyperlinkFromJSON,
    WidgetHyperlinkFromJSONTyped,
    WidgetHyperlinkToJSON,
    WidgetHyperlinkToJSONTyped,
} from './WidgetHyperlink';

/**
 * 
 * @export
 * @interface ChartWidgetContent
 */
export interface ChartWidgetContent {
    /**
     * 
     * @type {string}
     * @memberof ChartWidgetContent
     */
    type?: ChartWidgetContentTypeEnum;
    /**
     * Report Id denoting container source, if applicable.
     * @type {number}
     * @memberof ChartWidgetContent
     */
    reportId?: number;
    /**
     * Sheet Id denoting container source, if applicable.
     * @type {number}
     * @memberof ChartWidgetContent
     */
    sheetId?: number;
    /**
     * 
     * @type {Array<Axes>}
     * @memberof ChartWidgetContent
     */
    axes?: Array<Axes>;
    /**
     * 
     * @type {WidgetHyperlink}
     * @memberof ChartWidgetContent
     */
    hyperlink?: WidgetHyperlink;
    /**
     * Array of column Ids if the range was selected through the UI.
     * @type {Array<number>}
     * @memberof ChartWidgetContent
     */
    includedColumnIds?: Array<number>;
    /**
     * 
     * @type {Legend}
     * @memberof ChartWidgetContent
     */
    legend?: Legend;
    /**
     * 
     * @type {Array<SelectionRange>}
     * @memberof ChartWidgetContent
     */
    selectionRanges?: Array<SelectionRange>;
    /**
     * 
     * @type {Array<Series>}
     * @memberof ChartWidgetContent
     */
    series?: Array<Series>;
    /**
     * 
     * @type {WidgetChartGridLine}
     * @memberof ChartWidgetContent
     */
    verticalGridLines?: WidgetChartGridLine;
    /**
     * 
     * @type {WidgetChartGridLine}
     * @memberof ChartWidgetContent
     */
    horizontalGridLines?: WidgetChartGridLine;
}


/**
 * @export
 */
export const ChartWidgetContentTypeEnum = {
    Chart: 'CHART'
} as const;
export type ChartWidgetContentTypeEnum = typeof ChartWidgetContentTypeEnum[keyof typeof ChartWidgetContentTypeEnum];


/**
 * Check if a given object implements the ChartWidgetContent interface.
 */
export function instanceOfChartWidgetContent(value: object): value is ChartWidgetContent {
    return true;
}

export function ChartWidgetContentFromJSON(json: any): ChartWidgetContent {
    return ChartWidgetContentFromJSONTyped(json, false);
}

export function ChartWidgetContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChartWidgetContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'reportId': json['reportId'] == null ? undefined : json['reportId'],
        'sheetId': json['sheetId'] == null ? undefined : json['sheetId'],
        'axes': json['axes'] == null ? undefined : ((json['axes'] as Array<any>).map(AxesFromJSON)),
        'hyperlink': json['hyperlink'] == null ? undefined : WidgetHyperlinkFromJSON(json['hyperlink']),
        'includedColumnIds': json['includedColumnIds'] == null ? undefined : json['includedColumnIds'],
        'legend': json['legend'] == null ? undefined : LegendFromJSON(json['legend']),
        'selectionRanges': json['selectionRanges'] == null ? undefined : ((json['selectionRanges'] as Array<any>).map(SelectionRangeFromJSON)),
        'series': json['series'] == null ? undefined : ((json['series'] as Array<any>).map(SeriesFromJSON)),
        'verticalGridLines': json['verticalGridLines'] == null ? undefined : WidgetChartGridLineFromJSON(json['verticalGridLines']),
        'horizontalGridLines': json['horizontalGridLines'] == null ? undefined : WidgetChartGridLineFromJSON(json['horizontalGridLines']),
    };
}

export function ChartWidgetContentToJSON(json: any): ChartWidgetContent {
    return ChartWidgetContentToJSONTyped(json, false);
}

export function ChartWidgetContentToJSONTyped(value?: ChartWidgetContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'reportId': value['reportId'],
        'sheetId': value['sheetId'],
        'axes': value['axes'] == null ? undefined : ((value['axes'] as Array<any>).map(AxesToJSON)),
        'hyperlink': WidgetHyperlinkToJSON(value['hyperlink']),
        'includedColumnIds': value['includedColumnIds'],
        'legend': LegendToJSON(value['legend']),
        'selectionRanges': value['selectionRanges'] == null ? undefined : ((value['selectionRanges'] as Array<any>).map(SelectionRangeToJSON)),
        'series': value['series'] == null ? undefined : ((value['series'] as Array<any>).map(SeriesToJSON)),
        'verticalGridLines': WidgetChartGridLineToJSON(value['verticalGridLines']),
        'horizontalGridLines': WidgetChartGridLineToJSON(value['horizontalGridLines']),
    };
}

