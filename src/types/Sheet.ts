/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SheetUserSettings } from './SheetUserSettings';
import {
    SheetUserSettingsFromJSON,
    SheetUserSettingsFromJSONTyped,
    SheetUserSettingsToJSON,
    SheetUserSettingsToJSONTyped,
} from './SheetUserSettings';
import type { WorkspaceListing } from './WorkspaceListing';
import {
    WorkspaceListingFromJSON,
    WorkspaceListingFromJSONTyped,
    WorkspaceListingToJSON,
    WorkspaceListingToJSONTyped,
} from './WorkspaceListing';
import type { SheetSummary } from './SheetSummary';
import {
    SheetSummaryFromJSON,
    SheetSummaryFromJSONTyped,
    SheetSummaryToJSON,
    SheetSummaryToJSONTyped,
} from './SheetSummary';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
    AttachmentToJSONTyped,
} from './Attachment';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';
import type { AccessLevel } from './AccessLevel';
import {
    AccessLevelFromJSON,
    AccessLevelFromJSONTyped,
    AccessLevelToJSON,
    AccessLevelToJSONTyped,
} from './AccessLevel';
import type { Source } from './Source';
import {
    SourceFromJSON,
    SourceFromJSONTyped,
    SourceToJSON,
    SourceToJSONTyped,
} from './Source';
import type { ProjectSettings } from './ProjectSettings';
import {
    ProjectSettingsFromJSON,
    ProjectSettingsFromJSONTyped,
    ProjectSettingsToJSON,
    ProjectSettingsToJSONTyped,
} from './ProjectSettings';
import type { Column } from './Column';
import {
    ColumnFromJSON,
    ColumnFromJSONTyped,
    ColumnToJSON,
    ColumnToJSONTyped,
} from './Column';
import type { CrossSheetReference } from './CrossSheetReference';
import {
    CrossSheetReferenceFromJSON,
    CrossSheetReferenceFromJSONTyped,
    CrossSheetReferenceToJSON,
    CrossSheetReferenceToJSONTyped,
} from './CrossSheetReference';
import type { Row } from './Row';
import {
    RowFromJSON,
    RowFromJSONTyped,
    RowToJSON,
    RowToJSONTyped,
} from './Row';
import type { SheetUserPermissions } from './SheetUserPermissions';
import {
    SheetUserPermissionsFromJSON,
    SheetUserPermissionsFromJSONTyped,
    SheetUserPermissionsToJSON,
    SheetUserPermissionsToJSONTyped,
} from './SheetUserPermissions';
import type { Discussion } from './Discussion';
import {
    DiscussionFromJSON,
    DiscussionFromJSONTyped,
    DiscussionToJSON,
    DiscussionToJSONTyped,
} from './Discussion';

/**
 * 
 * @export
 * @interface Sheet
 */
export interface Sheet {
    /**
     * Sheet Id.
     * @type {number}
     * @memberof Sheet
     */
    id?: number;
    /**
     * The Id of the template from which to create the sheet. This attribute can be specified in a request, but is never present in a response.
     * @type {number}
     * @memberof Sheet
     */
    fromId?: number;
    /**
     * User Id of the sheet owner.
     * @type {number}
     * @memberof Sheet
     */
    ownerId?: number;
    /**
     * 
     * @type {AccessLevel}
     * @memberof Sheet
     */
    accessLevel?: AccessLevel;
    /**
     * Array of Attachment objects.
     * Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **attachments**.
     * 
     * @type {Array<Attachment>}
     * @memberof Sheet
     */
    attachments?: Array<Attachment>;
    /**
     * The sheet is enabled for cell images to be uploaded.
     * 
     * @type {boolean}
     * @memberof Sheet
     */
    cellImageUploadEnabled?: boolean;
    /**
     * 
     * @type {Array<Column>}
     * @memberof Sheet
     */
    columns?: Array<Column>;
    /**
     * 
     * @type {Timestamp}
     * @memberof Sheet
     */
    createdAt?: Timestamp;
    /**
     * Array of CrossSheetReference objects.
     * Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **crossSheetReferences**.
     * 
     * @type {Array<CrossSheetReference>}
     * @memberof Sheet
     */
    crossSheetReferences?: Array<CrossSheetReference>;
    /**
     * Indicates whether dependencies are enabled.
     * @type {boolean}
     * @memberof Sheet
     */
    dependenciesEnabled?: boolean;
    /**
     * Array of Discussion objects
     * Only returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **discussions**.
     * 
     * @type {Array<Discussion>}
     * @memberof Sheet
     */
    discussions?: Array<Discussion>;
    /**
     * Array of enum strings (see [Attachment.attachmentType](/api/smartsheet/openapi/attachments) indicating the allowable attachment options for the current user and sheet.
     * 
     * @type {Array<string>}
     * @memberof Sheet
     */
    effectiveAttachmentOptions?: Array<string>;
    /**
     * (Deprecated) Returned only if the user has marked this sheet as a favorite in their Home tab (value = **true**).
     * @type {boolean}
     * @memberof Sheet
     */
    favorite?: boolean;
    /**
     * Indicates whether "Gantt View" is enabled.
     * @type {boolean}
     * @memberof Sheet
     */
    ganttEnabled?: boolean;
    /**
     * Indicates whether a sheet summary is present.
     * @type {boolean}
     * @memberof Sheet
     */
    hasSummaryFields?: boolean;
    /**
     * Indicates whether multi-select is enabled.
     * @type {boolean}
     * @memberof Sheet
     */
    isMultiPicklistEnabled?: boolean;
    /**
     * 
     * @type {Timestamp}
     * @memberof Sheet
     */
    modifiedAt?: Timestamp;
    /**
     * Sheet name.
     * @type {string}
     * @memberof Sheet
     */
    name?: string;
    /**
     * Email address of the sheet owner.
     * @type {string}
     * @memberof Sheet
     */
    owner?: string;
    /**
     * URL that represents a direct link to the sheet in Smartsheet.
     * @type {string}
     * @memberof Sheet
     */
    permalink?: string;
    /**
     * 
     * @type {ProjectSettings}
     * @memberof Sheet
     */
    projectSettings?: ProjectSettings;
    /**
     * Returned only if the sheet belongs to an expired trial (value = **true**).
     * @type {boolean}
     * @memberof Sheet
     */
    readOnly?: boolean;
    /**
     * Indicates that resource management is enabled.
     * @type {boolean}
     * @memberof Sheet
     */
    resourceManagementEnabled?: boolean;
    /**
     * Resource Management type. Indicates the type of RM that is enabled.
     * @type {string}
     * @memberof Sheet
     */
    resourceManagementType?: SheetResourceManagementTypeEnum;
    /**
     * 
     * @type {Array<Row>}
     * @memberof Sheet
     */
    rows?: Array<Row>;
    /**
     * Returned only if there are column filters on the sheet. Value = **true** if "show parent rows" is enabled for the filters.
     * @type {boolean}
     * @memberof Sheet
     */
    showParentRowsForFilters?: boolean;
    /**
     * 
     * @type {Source}
     * @memberof Sheet
     */
    source?: Source;
    /**
     * 
     * @type {SheetSummary}
     * @memberof Sheet
     */
    summary?: SheetSummary;
    /**
     * The total number of rows in the sheet.
     * @type {number}
     * @memberof Sheet
     */
    totalRowCount?: number;
    /**
     * 
     * @type {SheetUserPermissions}
     * @memberof Sheet
     */
    userPermissions?: SheetUserPermissions;
    /**
     * 
     * @type {SheetUserSettings}
     * @memberof Sheet
     */
    userSettings?: SheetUserSettings;
    /**
     * A number that is incremented every time a sheet is modified.
     * @type {number}
     * @memberof Sheet
     */
    version?: number;
    /**
     * 
     * @type {WorkspaceListing}
     * @memberof Sheet
     */
    workspace?: WorkspaceListing;
}


/**
 * @export
 */
export const SheetResourceManagementTypeEnum = {
    None: 'NONE',
    LegacyResourceManagement: 'LEGACY_RESOURCE_MANAGEMENT',
    ResourceManagementBySmartsheet: 'RESOURCE_MANAGEMENT_BY_SMARTSHEET'
} as const;
export type SheetResourceManagementTypeEnum = typeof SheetResourceManagementTypeEnum[keyof typeof SheetResourceManagementTypeEnum];


/**
 * Check if a given object implements the Sheet interface.
 */
export function instanceOfSheet(value: object): value is Sheet {
    return true;
}

export function SheetFromJSON(json: any): Sheet {
    return SheetFromJSONTyped(json, false);
}

export function SheetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Sheet {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'fromId': json['fromId'] == null ? undefined : json['fromId'],
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'accessLevel': json['accessLevel'] == null ? undefined : AccessLevelFromJSON(json['accessLevel']),
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(AttachmentFromJSON)),
        'cellImageUploadEnabled': json['cellImageUploadEnabled'] == null ? undefined : json['cellImageUploadEnabled'],
        'columns': json['columns'] == null ? undefined : ((json['columns'] as Array<any>).map(ColumnFromJSON)),
        'createdAt': json['createdAt'] == null ? undefined : TimestampFromJSON(json['createdAt']),
        'crossSheetReferences': json['crossSheetReferences'] == null ? undefined : ((json['crossSheetReferences'] as Array<any>).map(CrossSheetReferenceFromJSON)),
        'dependenciesEnabled': json['dependenciesEnabled'] == null ? undefined : json['dependenciesEnabled'],
        'discussions': json['discussions'] == null ? undefined : ((json['discussions'] as Array<any>).map(DiscussionFromJSON)),
        'effectiveAttachmentOptions': json['effectiveAttachmentOptions'] == null ? undefined : json['effectiveAttachmentOptions'],
        'favorite': json['favorite'] == null ? undefined : json['favorite'],
        'ganttEnabled': json['ganttEnabled'] == null ? undefined : json['ganttEnabled'],
        'hasSummaryFields': json['hasSummaryFields'] == null ? undefined : json['hasSummaryFields'],
        'isMultiPicklistEnabled': json['isMultiPicklistEnabled'] == null ? undefined : json['isMultiPicklistEnabled'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : TimestampFromJSON(json['modifiedAt']),
        'name': json['name'] == null ? undefined : json['name'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'permalink': json['permalink'] == null ? undefined : json['permalink'],
        'projectSettings': json['projectSettings'] == null ? undefined : ProjectSettingsFromJSON(json['projectSettings']),
        'readOnly': json['readOnly'] == null ? undefined : json['readOnly'],
        'resourceManagementEnabled': json['resourceManagementEnabled'] == null ? undefined : json['resourceManagementEnabled'],
        'resourceManagementType': json['resourceManagementType'] == null ? undefined : json['resourceManagementType'],
        'rows': json['rows'] == null ? undefined : ((json['rows'] as Array<any>).map(RowFromJSON)),
        'showParentRowsForFilters': json['showParentRowsForFilters'] == null ? undefined : json['showParentRowsForFilters'],
        'source': json['source'] == null ? undefined : SourceFromJSON(json['source']),
        'summary': json['summary'] == null ? undefined : SheetSummaryFromJSON(json['summary']),
        'totalRowCount': json['totalRowCount'] == null ? undefined : json['totalRowCount'],
        'userPermissions': json['userPermissions'] == null ? undefined : SheetUserPermissionsFromJSON(json['userPermissions']),
        'userSettings': json['userSettings'] == null ? undefined : SheetUserSettingsFromJSON(json['userSettings']),
        'version': json['version'] == null ? undefined : json['version'],
        'workspace': json['workspace'] == null ? undefined : WorkspaceListingFromJSON(json['workspace']),
    };
}

export function SheetToJSON(json: any): Sheet {
    return SheetToJSONTyped(json, false);
}

export function SheetToJSONTyped(value?: Sheet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'fromId': value['fromId'],
        'ownerId': value['ownerId'],
        'accessLevel': AccessLevelToJSON(value['accessLevel']),
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(AttachmentToJSON)),
        'cellImageUploadEnabled': value['cellImageUploadEnabled'],
        'columns': value['columns'] == null ? undefined : ((value['columns'] as Array<any>).map(ColumnToJSON)),
        'createdAt': TimestampToJSON(value['createdAt']),
        'crossSheetReferences': value['crossSheetReferences'] == null ? undefined : ((value['crossSheetReferences'] as Array<any>).map(CrossSheetReferenceToJSON)),
        'dependenciesEnabled': value['dependenciesEnabled'],
        'discussions': value['discussions'] == null ? undefined : ((value['discussions'] as Array<any>).map(DiscussionToJSON)),
        'effectiveAttachmentOptions': value['effectiveAttachmentOptions'],
        'favorite': value['favorite'],
        'ganttEnabled': value['ganttEnabled'],
        'hasSummaryFields': value['hasSummaryFields'],
        'isMultiPicklistEnabled': value['isMultiPicklistEnabled'],
        'modifiedAt': TimestampToJSON(value['modifiedAt']),
        'name': value['name'],
        'owner': value['owner'],
        'permalink': value['permalink'],
        'projectSettings': ProjectSettingsToJSON(value['projectSettings']),
        'readOnly': value['readOnly'],
        'resourceManagementEnabled': value['resourceManagementEnabled'],
        'resourceManagementType': value['resourceManagementType'],
        'rows': value['rows'] == null ? undefined : ((value['rows'] as Array<any>).map(RowToJSON)),
        'showParentRowsForFilters': value['showParentRowsForFilters'],
        'source': SourceToJSON(value['source']),
        'summary': SheetSummaryToJSON(value['summary']),
        'totalRowCount': value['totalRowCount'],
        'userPermissions': SheetUserPermissionsToJSON(value['userPermissions']),
        'userSettings': SheetUserSettingsToJSON(value['userSettings']),
        'version': value['version'],
        'workspace': WorkspaceListingToJSON(value['workspace']),
    };
}

