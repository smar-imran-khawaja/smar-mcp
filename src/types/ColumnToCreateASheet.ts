/* tslint:disable */
/* eslint-disable */
/**
 * Smartsheet OpenAPI Reference
 * Welcome to the OpenAPI reference documentation for the Smartsheet API!  > **IMPORTANT:** > * The Smartsheet API is restricted to users on Business and Enterprise plans > * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)  **QUICKLINKS**  - **Base URL:**      ```     https://api.smartsheet.com/2.0/     ```  - **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).  - **Changelog:** See the latest [API updates](/api/smartsheet/changelog).  - **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.  - **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).  - **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).  Browse the Smartsheet API operations by resource on the left and start building with the Smartsheet API! 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AutoNumberFormat } from './AutoNumberFormat';
import {
    AutoNumberFormatFromJSON,
    AutoNumberFormatFromJSONTyped,
    AutoNumberFormatToJSON,
    AutoNumberFormatToJSONTyped,
} from './AutoNumberFormat';
import type { Type } from './Type';
import {
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
    TypeToJSONTyped,
} from './Type';
import type { SystemColumnType } from './SystemColumnType';
import {
    SystemColumnTypeFromJSON,
    SystemColumnTypeFromJSONTyped,
    SystemColumnTypeToJSON,
    SystemColumnTypeToJSONTyped,
} from './SystemColumnType';
import type { ContactOption } from './ContactOption';
import {
    ContactOptionFromJSON,
    ContactOptionFromJSONTyped,
    ContactOptionToJSON,
    ContactOptionToJSONTyped,
} from './ContactOption';

/**
 * 
 * @export
 * @interface ColumnToCreateASheet
 */
export interface ColumnToCreateASheet {
    /**
     * 
     * @type {AutoNumberFormat}
     * @memberof ColumnToCreateASheet
     */
    autoNumberFormat?: AutoNumberFormat;
    /**
     * Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**.
     * @type {Array<ContactOption>}
     * @memberof ColumnToCreateASheet
     */
    contactOptions?: Array<ContactOption>;
    /**
     * Array of the options available for the column.
     * @type {Array<string>}
     * @memberof ColumnToCreateASheet
     */
    options?: Array<string>;
    /**
     * Returned only if the column is the Primary Column (value = **true**).
     * @type {boolean}
     * @memberof ColumnToCreateASheet
     */
    primary?: boolean;
    /**
     * When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns).
     * @type {string}
     * @memberof ColumnToCreateASheet
     */
    symbol?: string;
    /**
     * 
     * @type {SystemColumnType}
     * @memberof ColumnToCreateASheet
     */
    systemColumnType?: SystemColumnType;
    /**
     * Column title.
     * @type {string}
     * @memberof ColumnToCreateASheet
     */
    title?: string;
    /**
     * 
     * @type {Type}
     * @memberof ColumnToCreateASheet
     */
    type?: Type;
    /**
     * Display width of the column in pixels.
     * @type {number}
     * @memberof ColumnToCreateASheet
     */
    width?: number;
}



/**
 * Check if a given object implements the ColumnToCreateASheet interface.
 */
export function instanceOfColumnToCreateASheet(value: object): value is ColumnToCreateASheet {
    return true;
}

export function ColumnToCreateASheetFromJSON(json: any): ColumnToCreateASheet {
    return ColumnToCreateASheetFromJSONTyped(json, false);
}

export function ColumnToCreateASheetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ColumnToCreateASheet {
    if (json == null) {
        return json;
    }
    return {
        
        'autoNumberFormat': json['autoNumberFormat'] == null ? undefined : AutoNumberFormatFromJSON(json['autoNumberFormat']),
        'contactOptions': json['contactOptions'] == null ? undefined : ((json['contactOptions'] as Array<any>).map(ContactOptionFromJSON)),
        'options': json['options'] == null ? undefined : json['options'],
        'primary': json['primary'] == null ? undefined : json['primary'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'systemColumnType': json['systemColumnType'] == null ? undefined : SystemColumnTypeFromJSON(json['systemColumnType']),
        'title': json['title'] == null ? undefined : json['title'],
        'type': json['type'] == null ? undefined : TypeFromJSON(json['type']),
        'width': json['width'] == null ? undefined : json['width'],
    };
}

export function ColumnToCreateASheetToJSON(json: any): ColumnToCreateASheet {
    return ColumnToCreateASheetToJSONTyped(json, false);
}

export function ColumnToCreateASheetToJSONTyped(value?: ColumnToCreateASheet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'autoNumberFormat': AutoNumberFormatToJSON(value['autoNumberFormat']),
        'contactOptions': value['contactOptions'] == null ? undefined : ((value['contactOptions'] as Array<any>).map(ContactOptionToJSON)),
        'options': value['options'],
        'primary': value['primary'],
        'symbol': value['symbol'],
        'systemColumnType': SystemColumnTypeToJSON(value['systemColumnType']),
        'title': value['title'],
        'type': TypeToJSON(value['type']),
        'width': value['width'],
    };
}

